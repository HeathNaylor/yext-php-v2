<?php
/**
 * PowerListings_Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * developer.yext.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PowerListings_Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PowerListings_Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation duplicatesCreate
     *
     * Duplicates: Create
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $url  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function duplicatesCreate($api_key, $v, $location_ids, $publisher_ids, $url, $account_id)
    {
        $this->duplicatesCreateWithHttpInfo($api_key, $v, $location_ids, $publisher_ids, $url, $account_id);
    }

    /**
     * Operation duplicatesCreateWithHttpInfo
     *
     * Duplicates: Create
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $url  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function duplicatesCreateWithHttpInfo($api_key, $v, $location_ids, $publisher_ids, $url, $account_id)
    {
        $returnType = '';
        $request = $this->duplicatesCreateRequest($api_key, $v, $location_ids, $publisher_ids, $url, $account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation duplicatesCreateAsync
     *
     * Duplicates: Create
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $url  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicatesCreateAsync($api_key, $v, $location_ids, $publisher_ids, $url, $account_id)
    {
        return $this->duplicatesCreateAsyncWithHttpInfo($api_key, $v, $location_ids, $publisher_ids, $url, $account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation duplicatesCreateAsyncWithHttpInfo
     *
     * Duplicates: Create
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $url  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicatesCreateAsyncWithHttpInfo($api_key, $v, $location_ids, $publisher_ids, $url, $account_id)
    {
        $returnType = '';
        $request = $this->duplicatesCreateRequest($api_key, $v, $location_ids, $publisher_ids, $url, $account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'duplicatesCreate'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $url  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function duplicatesCreateRequest($api_key, $v, $location_ids, $publisher_ids, $url, $account_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling duplicatesCreate'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling duplicatesCreate'
            );
        }
        // verify the required parameter 'location_ids' is set
        if ($location_ids === null || (is_array($location_ids) && count($location_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_ids when calling duplicatesCreate'
            );
        }
        // verify the required parameter 'publisher_ids' is set
        if ($publisher_ids === null || (is_array($publisher_ids) && count($publisher_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publisher_ids when calling duplicatesCreate'
            );
        }
        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling duplicatesCreate'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling duplicatesCreate'
            );
        }

        $resourcePath = '/accounts/{accountId}/powerlistings/duplicates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($location_ids !== null) {
            $queryParams['locationIds'] = ObjectSerializer::toQueryValue($location_ids);
        }
        // query params
        if ($publisher_ids !== null) {
            $queryParams['publisherIds'] = ObjectSerializer::toQueryValue($publisher_ids);
        }
        // query params
        if ($url !== null) {
            $queryParams['url'] = ObjectSerializer::toQueryValue($url);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation duplicatesDelete
     *
     * Duplicates: Delete
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $duplicate_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function duplicatesDelete($api_key, $v, $account_id, $duplicate_id)
    {
        $this->duplicatesDeleteWithHttpInfo($api_key, $v, $account_id, $duplicate_id);
    }

    /**
     * Operation duplicatesDeleteWithHttpInfo
     *
     * Duplicates: Delete
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $duplicate_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function duplicatesDeleteWithHttpInfo($api_key, $v, $account_id, $duplicate_id)
    {
        $returnType = '';
        $request = $this->duplicatesDeleteRequest($api_key, $v, $account_id, $duplicate_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation duplicatesDeleteAsync
     *
     * Duplicates: Delete
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $duplicate_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicatesDeleteAsync($api_key, $v, $account_id, $duplicate_id)
    {
        return $this->duplicatesDeleteAsyncWithHttpInfo($api_key, $v, $account_id, $duplicate_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation duplicatesDeleteAsyncWithHttpInfo
     *
     * Duplicates: Delete
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $duplicate_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicatesDeleteAsyncWithHttpInfo($api_key, $v, $account_id, $duplicate_id)
    {
        $returnType = '';
        $request = $this->duplicatesDeleteRequest($api_key, $v, $account_id, $duplicate_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'duplicatesDelete'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $duplicate_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function duplicatesDeleteRequest($api_key, $v, $account_id, $duplicate_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling duplicatesDelete'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling duplicatesDelete'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling duplicatesDelete'
            );
        }
        // verify the required parameter 'duplicate_id' is set
        if ($duplicate_id === null || (is_array($duplicate_id) && count($duplicate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $duplicate_id when calling duplicatesDelete'
            );
        }

        $resourcePath = '/accounts/{accountId}/powerlistings/duplicates/{duplicateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($duplicate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'duplicateId' . '}',
                ObjectSerializer::toPathValue($duplicate_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation duplicatesList
     *
     * Duplicates: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $statuses  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function duplicatesList($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id)
    {
        $this->duplicatesListWithHttpInfo($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id);
    }

    /**
     * Operation duplicatesListWithHttpInfo
     *
     * Duplicates: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $statuses  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function duplicatesListWithHttpInfo($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id)
    {
        $returnType = '';
        $request = $this->duplicatesListRequest($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation duplicatesListAsync
     *
     * Duplicates: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $statuses  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicatesListAsync($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id)
    {
        return $this->duplicatesListAsyncWithHttpInfo($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation duplicatesListAsyncWithHttpInfo
     *
     * Duplicates: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $statuses  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicatesListAsyncWithHttpInfo($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id)
    {
        $returnType = '';
        $request = $this->duplicatesListRequest($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'duplicatesList'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $statuses  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function duplicatesListRequest($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling duplicatesList'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling duplicatesList'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling duplicatesList'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling duplicatesList'
            );
        }
        // verify the required parameter 'location_ids' is set
        if ($location_ids === null || (is_array($location_ids) && count($location_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_ids when calling duplicatesList'
            );
        }
        // verify the required parameter 'publisher_ids' is set
        if ($publisher_ids === null || (is_array($publisher_ids) && count($publisher_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publisher_ids when calling duplicatesList'
            );
        }
        // verify the required parameter 'statuses' is set
        if ($statuses === null || (is_array($statuses) && count($statuses) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $statuses when calling duplicatesList'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling duplicatesList'
            );
        }

        $resourcePath = '/accounts/{accountId}/powerlistings/duplicates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($location_ids !== null) {
            $queryParams['locationIds'] = ObjectSerializer::toQueryValue($location_ids);
        }
        // query params
        if ($publisher_ids !== null) {
            $queryParams['publisherIds'] = ObjectSerializer::toQueryValue($publisher_ids);
        }
        // query params
        if ($statuses !== null) {
            $queryParams['statuses'] = ObjectSerializer::toQueryValue($statuses);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation duplicatesSuppress
     *
     * Duplicates: Suppress
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $duplicate_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function duplicatesSuppress($api_key, $v, $account_id, $duplicate_id)
    {
        $this->duplicatesSuppressWithHttpInfo($api_key, $v, $account_id, $duplicate_id);
    }

    /**
     * Operation duplicatesSuppressWithHttpInfo
     *
     * Duplicates: Suppress
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $duplicate_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function duplicatesSuppressWithHttpInfo($api_key, $v, $account_id, $duplicate_id)
    {
        $returnType = '';
        $request = $this->duplicatesSuppressRequest($api_key, $v, $account_id, $duplicate_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation duplicatesSuppressAsync
     *
     * Duplicates: Suppress
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $duplicate_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicatesSuppressAsync($api_key, $v, $account_id, $duplicate_id)
    {
        return $this->duplicatesSuppressAsyncWithHttpInfo($api_key, $v, $account_id, $duplicate_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation duplicatesSuppressAsyncWithHttpInfo
     *
     * Duplicates: Suppress
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $duplicate_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicatesSuppressAsyncWithHttpInfo($api_key, $v, $account_id, $duplicate_id)
    {
        $returnType = '';
        $request = $this->duplicatesSuppressRequest($api_key, $v, $account_id, $duplicate_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'duplicatesSuppress'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $duplicate_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function duplicatesSuppressRequest($api_key, $v, $account_id, $duplicate_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling duplicatesSuppress'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling duplicatesSuppress'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling duplicatesSuppress'
            );
        }
        // verify the required parameter 'duplicate_id' is set
        if ($duplicate_id === null || (is_array($duplicate_id) && count($duplicate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $duplicate_id when calling duplicatesSuppress'
            );
        }

        $resourcePath = '/accounts/{accountId}/powerlistings/duplicates/{duplicateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($duplicate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'duplicateId' . '}',
                ObjectSerializer::toPathValue($duplicate_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsList
     *
     * Listings: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $statuses  (required)
     * @param  string $language  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function listingsList($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $language, $account_id)
    {
        $this->listingsListWithHttpInfo($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $language, $account_id);
    }

    /**
     * Operation listingsListWithHttpInfo
     *
     * Listings: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $statuses  (required)
     * @param  string $language  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsListWithHttpInfo($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $language, $account_id)
    {
        $returnType = '';
        $request = $this->listingsListRequest($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $language, $account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation listingsListAsync
     *
     * Listings: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $statuses  (required)
     * @param  string $language  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsListAsync($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $language, $account_id)
    {
        return $this->listingsListAsyncWithHttpInfo($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $language, $account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsListAsyncWithHttpInfo
     *
     * Listings: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $statuses  (required)
     * @param  string $language  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsListAsyncWithHttpInfo($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $language, $account_id)
    {
        $returnType = '';
        $request = $this->listingsListRequest($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $language, $account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsList'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $statuses  (required)
     * @param  string $language  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsListRequest($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $language, $account_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling listingsList'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling listingsList'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling listingsList'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling listingsList'
            );
        }
        // verify the required parameter 'location_ids' is set
        if ($location_ids === null || (is_array($location_ids) && count($location_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_ids when calling listingsList'
            );
        }
        // verify the required parameter 'publisher_ids' is set
        if ($publisher_ids === null || (is_array($publisher_ids) && count($publisher_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publisher_ids when calling listingsList'
            );
        }
        // verify the required parameter 'statuses' is set
        if ($statuses === null || (is_array($statuses) && count($statuses) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $statuses when calling listingsList'
            );
        }
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling listingsList'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling listingsList'
            );
        }

        $resourcePath = '/accounts/{accountId}/powerlistings/listings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($location_ids !== null) {
            $queryParams['locationIds'] = ObjectSerializer::toQueryValue($location_ids);
        }
        // query params
        if ($publisher_ids !== null) {
            $queryParams['publisherIds'] = ObjectSerializer::toQueryValue($publisher_ids);
        }
        // query params
        if ($statuses !== null) {
            $queryParams['statuses'] = ObjectSerializer::toQueryValue($statuses);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsOptIn
     *
     * Listings: Opt In
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function listingsOptIn($api_key, $v, $location_ids, $publisher_ids, $account_id)
    {
        $this->listingsOptInWithHttpInfo($api_key, $v, $location_ids, $publisher_ids, $account_id);
    }

    /**
     * Operation listingsOptInWithHttpInfo
     *
     * Listings: Opt In
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsOptInWithHttpInfo($api_key, $v, $location_ids, $publisher_ids, $account_id)
    {
        $returnType = '';
        $request = $this->listingsOptInRequest($api_key, $v, $location_ids, $publisher_ids, $account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation listingsOptInAsync
     *
     * Listings: Opt In
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsOptInAsync($api_key, $v, $location_ids, $publisher_ids, $account_id)
    {
        return $this->listingsOptInAsyncWithHttpInfo($api_key, $v, $location_ids, $publisher_ids, $account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsOptInAsyncWithHttpInfo
     *
     * Listings: Opt In
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsOptInAsyncWithHttpInfo($api_key, $v, $location_ids, $publisher_ids, $account_id)
    {
        $returnType = '';
        $request = $this->listingsOptInRequest($api_key, $v, $location_ids, $publisher_ids, $account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsOptIn'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsOptInRequest($api_key, $v, $location_ids, $publisher_ids, $account_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling listingsOptIn'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling listingsOptIn'
            );
        }
        // verify the required parameter 'location_ids' is set
        if ($location_ids === null || (is_array($location_ids) && count($location_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_ids when calling listingsOptIn'
            );
        }
        // verify the required parameter 'publisher_ids' is set
        if ($publisher_ids === null || (is_array($publisher_ids) && count($publisher_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publisher_ids when calling listingsOptIn'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling listingsOptIn'
            );
        }

        $resourcePath = '/accounts/{accountId}/powerlistings/listings/optin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($location_ids !== null) {
            $queryParams['locationIds'] = ObjectSerializer::toQueryValue($location_ids);
        }
        // query params
        if ($publisher_ids !== null) {
            $queryParams['publisherIds'] = ObjectSerializer::toQueryValue($publisher_ids);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listingsOptOut
     *
     * Listings: Opt Out
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function listingsOptOut($api_key, $v, $location_ids, $publisher_ids, $account_id)
    {
        $this->listingsOptOutWithHttpInfo($api_key, $v, $location_ids, $publisher_ids, $account_id);
    }

    /**
     * Operation listingsOptOutWithHttpInfo
     *
     * Listings: Opt Out
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function listingsOptOutWithHttpInfo($api_key, $v, $location_ids, $publisher_ids, $account_id)
    {
        $returnType = '';
        $request = $this->listingsOptOutRequest($api_key, $v, $location_ids, $publisher_ids, $account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation listingsOptOutAsync
     *
     * Listings: Opt Out
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsOptOutAsync($api_key, $v, $location_ids, $publisher_ids, $account_id)
    {
        return $this->listingsOptOutAsyncWithHttpInfo($api_key, $v, $location_ids, $publisher_ids, $account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listingsOptOutAsyncWithHttpInfo
     *
     * Listings: Opt Out
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listingsOptOutAsyncWithHttpInfo($api_key, $v, $location_ids, $publisher_ids, $account_id)
    {
        $returnType = '';
        $request = $this->listingsOptOutRequest($api_key, $v, $location_ids, $publisher_ids, $account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listingsOptOut'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listingsOptOutRequest($api_key, $v, $location_ids, $publisher_ids, $account_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling listingsOptOut'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling listingsOptOut'
            );
        }
        // verify the required parameter 'location_ids' is set
        if ($location_ids === null || (is_array($location_ids) && count($location_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_ids when calling listingsOptOut'
            );
        }
        // verify the required parameter 'publisher_ids' is set
        if ($publisher_ids === null || (is_array($publisher_ids) && count($publisher_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publisher_ids when calling listingsOptOut'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling listingsOptOut'
            );
        }

        $resourcePath = '/accounts/{accountId}/powerlistings/listings/optout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($location_ids !== null) {
            $queryParams['locationIds'] = ObjectSerializer::toQueryValue($location_ids);
        }
        // query params
        if ($publisher_ids !== null) {
            $queryParams['publisherIds'] = ObjectSerializer::toQueryValue($publisher_ids);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publisherSuggestionsGet
     *
     * Publisher Suggestions: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $suggestion_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function publisherSuggestionsGet($api_key, $v, $account_id, $suggestion_id)
    {
        $this->publisherSuggestionsGetWithHttpInfo($api_key, $v, $account_id, $suggestion_id);
    }

    /**
     * Operation publisherSuggestionsGetWithHttpInfo
     *
     * Publisher Suggestions: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $suggestion_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function publisherSuggestionsGetWithHttpInfo($api_key, $v, $account_id, $suggestion_id)
    {
        $returnType = '';
        $request = $this->publisherSuggestionsGetRequest($api_key, $v, $account_id, $suggestion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation publisherSuggestionsGetAsync
     *
     * Publisher Suggestions: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $suggestion_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publisherSuggestionsGetAsync($api_key, $v, $account_id, $suggestion_id)
    {
        return $this->publisherSuggestionsGetAsyncWithHttpInfo($api_key, $v, $account_id, $suggestion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publisherSuggestionsGetAsyncWithHttpInfo
     *
     * Publisher Suggestions: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $suggestion_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publisherSuggestionsGetAsyncWithHttpInfo($api_key, $v, $account_id, $suggestion_id)
    {
        $returnType = '';
        $request = $this->publisherSuggestionsGetRequest($api_key, $v, $account_id, $suggestion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publisherSuggestionsGet'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $suggestion_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publisherSuggestionsGetRequest($api_key, $v, $account_id, $suggestion_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling publisherSuggestionsGet'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling publisherSuggestionsGet'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling publisherSuggestionsGet'
            );
        }
        // verify the required parameter 'suggestion_id' is set
        if ($suggestion_id === null || (is_array($suggestion_id) && count($suggestion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $suggestion_id when calling publisherSuggestionsGet'
            );
        }

        $resourcePath = '/accounts/{accountId}/powerlistings/publishersuggestions/{suggestionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($suggestion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'suggestionId' . '}',
                ObjectSerializer::toPathValue($suggestion_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publisherSuggestionsList
     *
     * Publisher Suggestions: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $statuses  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function publisherSuggestionsList($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id)
    {
        $this->publisherSuggestionsListWithHttpInfo($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id);
    }

    /**
     * Operation publisherSuggestionsListWithHttpInfo
     *
     * Publisher Suggestions: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $statuses  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function publisherSuggestionsListWithHttpInfo($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id)
    {
        $returnType = '';
        $request = $this->publisherSuggestionsListRequest($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation publisherSuggestionsListAsync
     *
     * Publisher Suggestions: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $statuses  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publisherSuggestionsListAsync($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id)
    {
        return $this->publisherSuggestionsListAsyncWithHttpInfo($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publisherSuggestionsListAsyncWithHttpInfo
     *
     * Publisher Suggestions: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $statuses  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publisherSuggestionsListAsyncWithHttpInfo($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id)
    {
        $returnType = '';
        $request = $this->publisherSuggestionsListRequest($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publisherSuggestionsList'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location_ids  (required)
     * @param  string $publisher_ids  (required)
     * @param  string $statuses  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publisherSuggestionsListRequest($api_key, $v, $limit, $offset, $location_ids, $publisher_ids, $statuses, $account_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling publisherSuggestionsList'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling publisherSuggestionsList'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling publisherSuggestionsList'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling publisherSuggestionsList'
            );
        }
        // verify the required parameter 'location_ids' is set
        if ($location_ids === null || (is_array($location_ids) && count($location_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_ids when calling publisherSuggestionsList'
            );
        }
        // verify the required parameter 'publisher_ids' is set
        if ($publisher_ids === null || (is_array($publisher_ids) && count($publisher_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publisher_ids when calling publisherSuggestionsList'
            );
        }
        // verify the required parameter 'statuses' is set
        if ($statuses === null || (is_array($statuses) && count($statuses) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $statuses when calling publisherSuggestionsList'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling publisherSuggestionsList'
            );
        }

        $resourcePath = '/accounts/{accountId}/powerlistings/publishersuggestions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($location_ids !== null) {
            $queryParams['locationIds'] = ObjectSerializer::toQueryValue($location_ids);
        }
        // query params
        if ($publisher_ids !== null) {
            $queryParams['publisherIds'] = ObjectSerializer::toQueryValue($publisher_ids);
        }
        // query params
        if ($statuses !== null) {
            $queryParams['statuses'] = ObjectSerializer::toQueryValue($statuses);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publisherSuggestionsUpdate
     *
     * Publisher Suggestions: Update
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $status  (required)
     * @param  string $account_id  (required)
     * @param  string $suggestion_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function publisherSuggestionsUpdate($api_key, $v, $status, $account_id, $suggestion_id)
    {
        $this->publisherSuggestionsUpdateWithHttpInfo($api_key, $v, $status, $account_id, $suggestion_id);
    }

    /**
     * Operation publisherSuggestionsUpdateWithHttpInfo
     *
     * Publisher Suggestions: Update
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $status  (required)
     * @param  string $account_id  (required)
     * @param  string $suggestion_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function publisherSuggestionsUpdateWithHttpInfo($api_key, $v, $status, $account_id, $suggestion_id)
    {
        $returnType = '';
        $request = $this->publisherSuggestionsUpdateRequest($api_key, $v, $status, $account_id, $suggestion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation publisherSuggestionsUpdateAsync
     *
     * Publisher Suggestions: Update
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $status  (required)
     * @param  string $account_id  (required)
     * @param  string $suggestion_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publisherSuggestionsUpdateAsync($api_key, $v, $status, $account_id, $suggestion_id)
    {
        return $this->publisherSuggestionsUpdateAsyncWithHttpInfo($api_key, $v, $status, $account_id, $suggestion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publisherSuggestionsUpdateAsyncWithHttpInfo
     *
     * Publisher Suggestions: Update
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $status  (required)
     * @param  string $account_id  (required)
     * @param  string $suggestion_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publisherSuggestionsUpdateAsyncWithHttpInfo($api_key, $v, $status, $account_id, $suggestion_id)
    {
        $returnType = '';
        $request = $this->publisherSuggestionsUpdateRequest($api_key, $v, $status, $account_id, $suggestion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publisherSuggestionsUpdate'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $status  (required)
     * @param  string $account_id  (required)
     * @param  string $suggestion_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publisherSuggestionsUpdateRequest($api_key, $v, $status, $account_id, $suggestion_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling publisherSuggestionsUpdate'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling publisherSuggestionsUpdate'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling publisherSuggestionsUpdate'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling publisherSuggestionsUpdate'
            );
        }
        // verify the required parameter 'suggestion_id' is set
        if ($suggestion_id === null || (is_array($suggestion_id) && count($suggestion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $suggestion_id when calling publisherSuggestionsUpdate'
            );
        }

        $resourcePath = '/accounts/{accountId}/powerlistings/publishersuggestions/{suggestionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($suggestion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'suggestionId' . '}',
                ObjectSerializer::toPathValue($suggestion_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publishersList
     *
     * Publishers: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $subset  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function publishersList($api_key, $v, $subset, $account_id)
    {
        $this->publishersListWithHttpInfo($api_key, $v, $subset, $account_id);
    }

    /**
     * Operation publishersListWithHttpInfo
     *
     * Publishers: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $subset  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function publishersListWithHttpInfo($api_key, $v, $subset, $account_id)
    {
        $returnType = '';
        $request = $this->publishersListRequest($api_key, $v, $subset, $account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation publishersListAsync
     *
     * Publishers: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $subset  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publishersListAsync($api_key, $v, $subset, $account_id)
    {
        return $this->publishersListAsyncWithHttpInfo($api_key, $v, $subset, $account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publishersListAsyncWithHttpInfo
     *
     * Publishers: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $subset  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publishersListAsyncWithHttpInfo($api_key, $v, $subset, $account_id)
    {
        $returnType = '';
        $request = $this->publishersListRequest($api_key, $v, $subset, $account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publishersList'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $subset  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publishersListRequest($api_key, $v, $subset, $account_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling publishersList'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling publishersList'
            );
        }
        // verify the required parameter 'subset' is set
        if ($subset === null || (is_array($subset) && count($subset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subset when calling publishersList'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling publishersList'
            );
        }

        $resourcePath = '/accounts/{accountId}/powerlistings/publishers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($subset !== null) {
            $queryParams['subset'] = ObjectSerializer::toQueryValue($subset);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation verificationComplete
     *
     * Verification Complete
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\VerificationCompleteRequest[] $body  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function verificationComplete($api_key, $v, $content_type, $body, $account_id, $publisher_id)
    {
        $this->verificationCompleteWithHttpInfo($api_key, $v, $content_type, $body, $account_id, $publisher_id);
    }

    /**
     * Operation verificationCompleteWithHttpInfo
     *
     * Verification Complete
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\VerificationCompleteRequest[] $body  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function verificationCompleteWithHttpInfo($api_key, $v, $content_type, $body, $account_id, $publisher_id)
    {
        $returnType = '';
        $request = $this->verificationCompleteRequest($api_key, $v, $content_type, $body, $account_id, $publisher_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation verificationCompleteAsync
     *
     * Verification Complete
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\VerificationCompleteRequest[] $body  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verificationCompleteAsync($api_key, $v, $content_type, $body, $account_id, $publisher_id)
    {
        return $this->verificationCompleteAsyncWithHttpInfo($api_key, $v, $content_type, $body, $account_id, $publisher_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation verificationCompleteAsyncWithHttpInfo
     *
     * Verification Complete
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\VerificationCompleteRequest[] $body  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verificationCompleteAsyncWithHttpInfo($api_key, $v, $content_type, $body, $account_id, $publisher_id)
    {
        $returnType = '';
        $request = $this->verificationCompleteRequest($api_key, $v, $content_type, $body, $account_id, $publisher_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'verificationComplete'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\VerificationCompleteRequest[] $body  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function verificationCompleteRequest($api_key, $v, $content_type, $body, $account_id, $publisher_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling verificationComplete'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling verificationComplete'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling verificationComplete'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling verificationComplete'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling verificationComplete'
            );
        }
        // verify the required parameter 'publisher_id' is set
        if ($publisher_id === null || (is_array($publisher_id) && count($publisher_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publisher_id when calling verificationComplete'
            );
        }

        $resourcePath = '/{accountId}/listings/verifications/{publisherId}/complete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($publisher_id !== null) {
            $resourcePath = str_replace(
                '{' . 'publisherId' . '}',
                ObjectSerializer::toPathValue($publisher_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation verificationInitiate
     *
     * Verification Initiate
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\VerificationInitiateRequest[] $body  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     * @param  string $locale  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function verificationInitiate($api_key, $v, $content_type, $body, $account_id, $publisher_id, $locale)
    {
        $this->verificationInitiateWithHttpInfo($api_key, $v, $content_type, $body, $account_id, $publisher_id, $locale);
    }

    /**
     * Operation verificationInitiateWithHttpInfo
     *
     * Verification Initiate
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\VerificationInitiateRequest[] $body  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     * @param  string $locale  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function verificationInitiateWithHttpInfo($api_key, $v, $content_type, $body, $account_id, $publisher_id, $locale)
    {
        $returnType = '';
        $request = $this->verificationInitiateRequest($api_key, $v, $content_type, $body, $account_id, $publisher_id, $locale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation verificationInitiateAsync
     *
     * Verification Initiate
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\VerificationInitiateRequest[] $body  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     * @param  string $locale  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verificationInitiateAsync($api_key, $v, $content_type, $body, $account_id, $publisher_id, $locale)
    {
        return $this->verificationInitiateAsyncWithHttpInfo($api_key, $v, $content_type, $body, $account_id, $publisher_id, $locale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation verificationInitiateAsyncWithHttpInfo
     *
     * Verification Initiate
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\VerificationInitiateRequest[] $body  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     * @param  string $locale  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verificationInitiateAsyncWithHttpInfo($api_key, $v, $content_type, $body, $account_id, $publisher_id, $locale)
    {
        $returnType = '';
        $request = $this->verificationInitiateRequest($api_key, $v, $content_type, $body, $account_id, $publisher_id, $locale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'verificationInitiate'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\VerificationInitiateRequest[] $body  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     * @param  string $locale  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function verificationInitiateRequest($api_key, $v, $content_type, $body, $account_id, $publisher_id, $locale)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling verificationInitiate'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling verificationInitiate'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling verificationInitiate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling verificationInitiate'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling verificationInitiate'
            );
        }
        // verify the required parameter 'publisher_id' is set
        if ($publisher_id === null || (is_array($publisher_id) && count($publisher_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publisher_id when calling verificationInitiate'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling verificationInitiate'
            );
        }

        $resourcePath = '/{accountId}/listings/verifications/{publisherId}/{locale}/initiate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($publisher_id !== null) {
            $resourcePath = str_replace(
                '{' . 'publisherId' . '}',
                ObjectSerializer::toPathValue($publisher_id),
                $resourcePath
            );
        }
        // path params
        if ($locale !== null) {
            $resourcePath = str_replace(
                '{' . 'locale' . '}',
                ObjectSerializer::toPathValue($locale),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation verificationMethodsList
     *
     * Verification Methods List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     * @param  string $locale  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function verificationMethodsList($api_key, $v, $account_id, $publisher_id, $locale)
    {
        $this->verificationMethodsListWithHttpInfo($api_key, $v, $account_id, $publisher_id, $locale);
    }

    /**
     * Operation verificationMethodsListWithHttpInfo
     *
     * Verification Methods List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     * @param  string $locale  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function verificationMethodsListWithHttpInfo($api_key, $v, $account_id, $publisher_id, $locale)
    {
        $returnType = '';
        $request = $this->verificationMethodsListRequest($api_key, $v, $account_id, $publisher_id, $locale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation verificationMethodsListAsync
     *
     * Verification Methods List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     * @param  string $locale  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verificationMethodsListAsync($api_key, $v, $account_id, $publisher_id, $locale)
    {
        return $this->verificationMethodsListAsyncWithHttpInfo($api_key, $v, $account_id, $publisher_id, $locale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation verificationMethodsListAsyncWithHttpInfo
     *
     * Verification Methods List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     * @param  string $locale  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verificationMethodsListAsyncWithHttpInfo($api_key, $v, $account_id, $publisher_id, $locale)
    {
        $returnType = '';
        $request = $this->verificationMethodsListRequest($api_key, $v, $account_id, $publisher_id, $locale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'verificationMethodsList'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     * @param  string $locale  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function verificationMethodsListRequest($api_key, $v, $account_id, $publisher_id, $locale)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling verificationMethodsList'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling verificationMethodsList'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling verificationMethodsList'
            );
        }
        // verify the required parameter 'publisher_id' is set
        if ($publisher_id === null || (is_array($publisher_id) && count($publisher_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publisher_id when calling verificationMethodsList'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling verificationMethodsList'
            );
        }

        $resourcePath = '/accounts/{accountId}/listings/verifications/{publisherId}/{locale}/methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($publisher_id !== null) {
            $resourcePath = str_replace(
                '{' . 'publisherId' . '}',
                ObjectSerializer::toPathValue($publisher_id),
                $resourcePath
            );
        }
        // path params
        if ($locale !== null) {
            $resourcePath = str_replace(
                '{' . 'locale' . '}',
                ObjectSerializer::toPathValue($locale),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation verificationStatusesList
     *
     * Verification Statuses List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function verificationStatusesList($api_key, $v, $account_id, $publisher_id)
    {
        $this->verificationStatusesListWithHttpInfo($api_key, $v, $account_id, $publisher_id);
    }

    /**
     * Operation verificationStatusesListWithHttpInfo
     *
     * Verification Statuses List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function verificationStatusesListWithHttpInfo($api_key, $v, $account_id, $publisher_id)
    {
        $returnType = '';
        $request = $this->verificationStatusesListRequest($api_key, $v, $account_id, $publisher_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation verificationStatusesListAsync
     *
     * Verification Statuses List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verificationStatusesListAsync($api_key, $v, $account_id, $publisher_id)
    {
        return $this->verificationStatusesListAsyncWithHttpInfo($api_key, $v, $account_id, $publisher_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation verificationStatusesListAsyncWithHttpInfo
     *
     * Verification Statuses List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verificationStatusesListAsyncWithHttpInfo($api_key, $v, $account_id, $publisher_id)
    {
        $returnType = '';
        $request = $this->verificationStatusesListRequest($api_key, $v, $account_id, $publisher_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'verificationStatusesList'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $account_id  (required)
     * @param  string $publisher_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function verificationStatusesListRequest($api_key, $v, $account_id, $publisher_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling verificationStatusesList'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling verificationStatusesList'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling verificationStatusesList'
            );
        }
        // verify the required parameter 'publisher_id' is set
        if ($publisher_id === null || (is_array($publisher_id) && count($publisher_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publisher_id when calling verificationStatusesList'
            );
        }

        $resourcePath = '/accounts/{accountId}/listings/verifications/{publisherId}/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($publisher_id !== null) {
            $resourcePath = str_replace(
                '{' . 'publisherId' . '}',
                ObjectSerializer::toPathValue($publisher_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
