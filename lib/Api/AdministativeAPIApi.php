<?php
/**
 * AdministativeAPIApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * developer.yext.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * AdministativeAPIApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdministativeAPIApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountsUpdate
     *
     * Accounts: Update
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AccountsUpdateRequest $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsUpdate($api_key, $v, $content_type, $body)
    {
        $this->accountsUpdateWithHttpInfo($api_key, $v, $content_type, $body);
    }

    /**
     * Operation accountsUpdateWithHttpInfo
     *
     * Accounts: Update
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AccountsUpdateRequest $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsUpdateWithHttpInfo($api_key, $v, $content_type, $body)
    {
        $returnType = '';
        $request = $this->accountsUpdateRequest($api_key, $v, $content_type, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountsUpdateAsync
     *
     * Accounts: Update
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AccountsUpdateRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsUpdateAsync($api_key, $v, $content_type, $body)
    {
        return $this->accountsUpdateAsyncWithHttpInfo($api_key, $v, $content_type, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsUpdateAsyncWithHttpInfo
     *
     * Accounts: Update
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AccountsUpdateRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsUpdateAsyncWithHttpInfo($api_key, $v, $content_type, $body)
    {
        $returnType = '';
        $request = $this->accountsUpdateRequest($api_key, $v, $content_type, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsUpdate'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AccountsUpdateRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsUpdateRequest($api_key, $v, $content_type, $body)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling accountsUpdate'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling accountsUpdate'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling accountsUpdate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling accountsUpdate'
            );
        }

        $resourcePath = '/accounts/me';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addRequestsCreateExistingLocation
     *
     * Add Requests: Create (Existing Location)
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AddRequestsCreateExistingLocationRequest $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addRequestsCreateExistingLocation($api_key, $v, $content_type, $body)
    {
        $this->addRequestsCreateExistingLocationWithHttpInfo($api_key, $v, $content_type, $body);
    }

    /**
     * Operation addRequestsCreateExistingLocationWithHttpInfo
     *
     * Add Requests: Create (Existing Location)
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AddRequestsCreateExistingLocationRequest $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addRequestsCreateExistingLocationWithHttpInfo($api_key, $v, $content_type, $body)
    {
        $returnType = '';
        $request = $this->addRequestsCreateExistingLocationRequest($api_key, $v, $content_type, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addRequestsCreateExistingLocationAsync
     *
     * Add Requests: Create (Existing Location)
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AddRequestsCreateExistingLocationRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRequestsCreateExistingLocationAsync($api_key, $v, $content_type, $body)
    {
        return $this->addRequestsCreateExistingLocationAsyncWithHttpInfo($api_key, $v, $content_type, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addRequestsCreateExistingLocationAsyncWithHttpInfo
     *
     * Add Requests: Create (Existing Location)
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AddRequestsCreateExistingLocationRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRequestsCreateExistingLocationAsyncWithHttpInfo($api_key, $v, $content_type, $body)
    {
        $returnType = '';
        $request = $this->addRequestsCreateExistingLocationRequest($api_key, $v, $content_type, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addRequestsCreateExistingLocation'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AddRequestsCreateExistingLocationRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addRequestsCreateExistingLocationRequest($api_key, $v, $content_type, $body)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling addRequestsCreateExistingLocation'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling addRequestsCreateExistingLocation'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling addRequestsCreateExistingLocation'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addRequestsCreateExistingLocation'
            );
        }

        $resourcePath = '/accounts/me/existinglocationaddrequests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addRequestsCreateNewLocation
     *
     * Add Requests: Create (New Location)
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AddRequestsCreateNewLocationRequest $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addRequestsCreateNewLocation($api_key, $v, $content_type, $body)
    {
        $this->addRequestsCreateNewLocationWithHttpInfo($api_key, $v, $content_type, $body);
    }

    /**
     * Operation addRequestsCreateNewLocationWithHttpInfo
     *
     * Add Requests: Create (New Location)
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AddRequestsCreateNewLocationRequest $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addRequestsCreateNewLocationWithHttpInfo($api_key, $v, $content_type, $body)
    {
        $returnType = '';
        $request = $this->addRequestsCreateNewLocationRequest($api_key, $v, $content_type, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addRequestsCreateNewLocationAsync
     *
     * Add Requests: Create (New Location)
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AddRequestsCreateNewLocationRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRequestsCreateNewLocationAsync($api_key, $v, $content_type, $body)
    {
        return $this->addRequestsCreateNewLocationAsyncWithHttpInfo($api_key, $v, $content_type, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addRequestsCreateNewLocationAsyncWithHttpInfo
     *
     * Add Requests: Create (New Location)
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AddRequestsCreateNewLocationRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRequestsCreateNewLocationAsyncWithHttpInfo($api_key, $v, $content_type, $body)
    {
        $returnType = '';
        $request = $this->addRequestsCreateNewLocationRequest($api_key, $v, $content_type, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addRequestsCreateNewLocation'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AddRequestsCreateNewLocationRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addRequestsCreateNewLocationRequest($api_key, $v, $content_type, $body)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling addRequestsCreateNewLocation'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling addRequestsCreateNewLocation'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling addRequestsCreateNewLocation'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addRequestsCreateNewLocation'
            );
        }

        $resourcePath = '/accounts/me/newlocationaddrequests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addRequestsGet
     *
     * Add Requests: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $add_request_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addRequestsGet($api_key, $v, $add_request_id)
    {
        $this->addRequestsGetWithHttpInfo($api_key, $v, $add_request_id);
    }

    /**
     * Operation addRequestsGetWithHttpInfo
     *
     * Add Requests: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $add_request_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addRequestsGetWithHttpInfo($api_key, $v, $add_request_id)
    {
        $returnType = '';
        $request = $this->addRequestsGetRequest($api_key, $v, $add_request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addRequestsGetAsync
     *
     * Add Requests: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $add_request_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRequestsGetAsync($api_key, $v, $add_request_id)
    {
        return $this->addRequestsGetAsyncWithHttpInfo($api_key, $v, $add_request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addRequestsGetAsyncWithHttpInfo
     *
     * Add Requests: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $add_request_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRequestsGetAsyncWithHttpInfo($api_key, $v, $add_request_id)
    {
        $returnType = '';
        $request = $this->addRequestsGetRequest($api_key, $v, $add_request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addRequestsGet'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $add_request_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addRequestsGetRequest($api_key, $v, $add_request_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling addRequestsGet'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling addRequestsGet'
            );
        }
        // verify the required parameter 'add_request_id' is set
        if ($add_request_id === null || (is_array($add_request_id) && count($add_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_request_id when calling addRequestsGet'
            );
        }

        $resourcePath = '/accounts/me/addrequests/{addRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }

        // path params
        if ($add_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'addRequestId' . '}',
                ObjectSerializer::toPathValue($add_request_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addRequestsList
     *
     * Add Requests: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $status  (required)
     * @param  string $submitted_after  (required)
     * @param  string $submitted_before  (required)
     * @param  string $updated_after  (required)
     * @param  string $updated_before  (required)
     * @param  string $sku  (required)
     * @param  string $agreement_id  (required)
     * @param  string $location_id  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addRequestsList($api_key, $v, $status, $submitted_after, $submitted_before, $updated_after, $updated_before, $sku, $agreement_id, $location_id, $limit, $offset)
    {
        $this->addRequestsListWithHttpInfo($api_key, $v, $status, $submitted_after, $submitted_before, $updated_after, $updated_before, $sku, $agreement_id, $location_id, $limit, $offset);
    }

    /**
     * Operation addRequestsListWithHttpInfo
     *
     * Add Requests: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $status  (required)
     * @param  string $submitted_after  (required)
     * @param  string $submitted_before  (required)
     * @param  string $updated_after  (required)
     * @param  string $updated_before  (required)
     * @param  string $sku  (required)
     * @param  string $agreement_id  (required)
     * @param  string $location_id  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addRequestsListWithHttpInfo($api_key, $v, $status, $submitted_after, $submitted_before, $updated_after, $updated_before, $sku, $agreement_id, $location_id, $limit, $offset)
    {
        $returnType = '';
        $request = $this->addRequestsListRequest($api_key, $v, $status, $submitted_after, $submitted_before, $updated_after, $updated_before, $sku, $agreement_id, $location_id, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addRequestsListAsync
     *
     * Add Requests: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $status  (required)
     * @param  string $submitted_after  (required)
     * @param  string $submitted_before  (required)
     * @param  string $updated_after  (required)
     * @param  string $updated_before  (required)
     * @param  string $sku  (required)
     * @param  string $agreement_id  (required)
     * @param  string $location_id  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRequestsListAsync($api_key, $v, $status, $submitted_after, $submitted_before, $updated_after, $updated_before, $sku, $agreement_id, $location_id, $limit, $offset)
    {
        return $this->addRequestsListAsyncWithHttpInfo($api_key, $v, $status, $submitted_after, $submitted_before, $updated_after, $updated_before, $sku, $agreement_id, $location_id, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addRequestsListAsyncWithHttpInfo
     *
     * Add Requests: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $status  (required)
     * @param  string $submitted_after  (required)
     * @param  string $submitted_before  (required)
     * @param  string $updated_after  (required)
     * @param  string $updated_before  (required)
     * @param  string $sku  (required)
     * @param  string $agreement_id  (required)
     * @param  string $location_id  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRequestsListAsyncWithHttpInfo($api_key, $v, $status, $submitted_after, $submitted_before, $updated_after, $updated_before, $sku, $agreement_id, $location_id, $limit, $offset)
    {
        $returnType = '';
        $request = $this->addRequestsListRequest($api_key, $v, $status, $submitted_after, $submitted_before, $updated_after, $updated_before, $sku, $agreement_id, $location_id, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addRequestsList'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $status  (required)
     * @param  string $submitted_after  (required)
     * @param  string $submitted_before  (required)
     * @param  string $updated_after  (required)
     * @param  string $updated_before  (required)
     * @param  string $sku  (required)
     * @param  string $agreement_id  (required)
     * @param  string $location_id  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addRequestsListRequest($api_key, $v, $status, $submitted_after, $submitted_before, $updated_after, $updated_before, $sku, $agreement_id, $location_id, $limit, $offset)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling addRequestsList'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling addRequestsList'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling addRequestsList'
            );
        }
        // verify the required parameter 'submitted_after' is set
        if ($submitted_after === null || (is_array($submitted_after) && count($submitted_after) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submitted_after when calling addRequestsList'
            );
        }
        // verify the required parameter 'submitted_before' is set
        if ($submitted_before === null || (is_array($submitted_before) && count($submitted_before) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submitted_before when calling addRequestsList'
            );
        }
        // verify the required parameter 'updated_after' is set
        if ($updated_after === null || (is_array($updated_after) && count($updated_after) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updated_after when calling addRequestsList'
            );
        }
        // verify the required parameter 'updated_before' is set
        if ($updated_before === null || (is_array($updated_before) && count($updated_before) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updated_before when calling addRequestsList'
            );
        }
        // verify the required parameter 'sku' is set
        if ($sku === null || (is_array($sku) && count($sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku when calling addRequestsList'
            );
        }
        // verify the required parameter 'agreement_id' is set
        if ($agreement_id === null || (is_array($agreement_id) && count($agreement_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agreement_id when calling addRequestsList'
            );
        }
        // verify the required parameter 'location_id' is set
        if ($location_id === null || (is_array($location_id) && count($location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_id when calling addRequestsList'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling addRequestsList'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling addRequestsList'
            );
        }

        $resourcePath = '/accounts/me/addrequests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($submitted_after !== null) {
            $queryParams['submittedAfter'] = ObjectSerializer::toQueryValue($submitted_after);
        }
        // query params
        if ($submitted_before !== null) {
            $queryParams['submittedBefore'] = ObjectSerializer::toQueryValue($submitted_before);
        }
        // query params
        if ($updated_after !== null) {
            $queryParams['updatedAfter'] = ObjectSerializer::toQueryValue($updated_after);
        }
        // query params
        if ($updated_before !== null) {
            $queryParams['updatedBefore'] = ObjectSerializer::toQueryValue($updated_before);
        }
        // query params
        if ($sku !== null) {
            $queryParams['sku'] = ObjectSerializer::toQueryValue($sku);
        }
        // query params
        if ($agreement_id !== null) {
            $queryParams['agreementId'] = ObjectSerializer::toQueryValue($agreement_id);
        }
        // query params
        if ($location_id !== null) {
            $queryParams['locationId'] = ObjectSerializer::toQueryValue($location_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addRequestsProcessSandboxAPIOnly
     *
     * Add Requests: Process (Sandbox API Only)
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AddRequestsProcessSandboxAPIOnlyRequest $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addRequestsProcessSandboxAPIOnly($api_key, $v, $content_type, $body)
    {
        $this->addRequestsProcessSandboxAPIOnlyWithHttpInfo($api_key, $v, $content_type, $body);
    }

    /**
     * Operation addRequestsProcessSandboxAPIOnlyWithHttpInfo
     *
     * Add Requests: Process (Sandbox API Only)
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AddRequestsProcessSandboxAPIOnlyRequest $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addRequestsProcessSandboxAPIOnlyWithHttpInfo($api_key, $v, $content_type, $body)
    {
        $returnType = '';
        $request = $this->addRequestsProcessSandboxAPIOnlyRequest($api_key, $v, $content_type, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addRequestsProcessSandboxAPIOnlyAsync
     *
     * Add Requests: Process (Sandbox API Only)
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AddRequestsProcessSandboxAPIOnlyRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRequestsProcessSandboxAPIOnlyAsync($api_key, $v, $content_type, $body)
    {
        return $this->addRequestsProcessSandboxAPIOnlyAsyncWithHttpInfo($api_key, $v, $content_type, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addRequestsProcessSandboxAPIOnlyAsyncWithHttpInfo
     *
     * Add Requests: Process (Sandbox API Only)
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AddRequestsProcessSandboxAPIOnlyRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRequestsProcessSandboxAPIOnlyAsyncWithHttpInfo($api_key, $v, $content_type, $body)
    {
        $returnType = '';
        $request = $this->addRequestsProcessSandboxAPIOnlyRequest($api_key, $v, $content_type, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addRequestsProcessSandboxAPIOnly'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\AddRequestsProcessSandboxAPIOnlyRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addRequestsProcessSandboxAPIOnlyRequest($api_key, $v, $content_type, $body)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling addRequestsProcessSandboxAPIOnly'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling addRequestsProcessSandboxAPIOnly'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling addRequestsProcessSandboxAPIOnly'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addRequestsProcessSandboxAPIOnly'
            );
        }

        $resourcePath = '/accounts/me/processaddrequest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation availableServicesList
     *
     * Available Services: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function availableServicesList($api_key, $v)
    {
        $this->availableServicesListWithHttpInfo($api_key, $v);
    }

    /**
     * Operation availableServicesListWithHttpInfo
     *
     * Available Services: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function availableServicesListWithHttpInfo($api_key, $v)
    {
        $returnType = '';
        $request = $this->availableServicesListRequest($api_key, $v);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation availableServicesListAsync
     *
     * Available Services: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availableServicesListAsync($api_key, $v)
    {
        return $this->availableServicesListAsyncWithHttpInfo($api_key, $v)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation availableServicesListAsyncWithHttpInfo
     *
     * Available Services: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availableServicesListAsyncWithHttpInfo($api_key, $v)
    {
        $returnType = '';
        $request = $this->availableServicesListRequest($api_key, $v);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'availableServicesList'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function availableServicesListRequest($api_key, $v)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling availableServicesList'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling availableServicesList'
            );
        }

        $resourcePath = '/accounts/me/availableservices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountsGet
     *
     * Accounts: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAccountsGet($api_key, $v)
    {
        $this->getAccountsGetWithHttpInfo($api_key, $v);
    }

    /**
     * Operation getAccountsGetWithHttpInfo
     *
     * Accounts: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountsGetWithHttpInfo($api_key, $v)
    {
        $returnType = '';
        $request = $this->getAccountsGetRequest($api_key, $v);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountsGetAsync
     *
     * Accounts: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountsGetAsync($api_key, $v)
    {
        return $this->getAccountsGetAsyncWithHttpInfo($api_key, $v)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountsGetAsyncWithHttpInfo
     *
     * Accounts: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountsGetAsyncWithHttpInfo($api_key, $v)
    {
        $returnType = '';
        $request = $this->getAccountsGetRequest($api_key, $v);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountsGet'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountsGetRequest($api_key, $v)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling getAccountsGet'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling getAccountsGet'
            );
        }

        $resourcePath = '/accounts/me';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation servicesCancel
     *
     * Services: Cancel
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\ServicesCancelRequest $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function servicesCancel($api_key, $v, $content_type, $body)
    {
        $this->servicesCancelWithHttpInfo($api_key, $v, $content_type, $body);
    }

    /**
     * Operation servicesCancelWithHttpInfo
     *
     * Services: Cancel
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\ServicesCancelRequest $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function servicesCancelWithHttpInfo($api_key, $v, $content_type, $body)
    {
        $returnType = '';
        $request = $this->servicesCancelRequest($api_key, $v, $content_type, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation servicesCancelAsync
     *
     * Services: Cancel
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\ServicesCancelRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function servicesCancelAsync($api_key, $v, $content_type, $body)
    {
        return $this->servicesCancelAsyncWithHttpInfo($api_key, $v, $content_type, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation servicesCancelAsyncWithHttpInfo
     *
     * Services: Cancel
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\ServicesCancelRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function servicesCancelAsyncWithHttpInfo($api_key, $v, $content_type, $body)
    {
        $returnType = '';
        $request = $this->servicesCancelRequest($api_key, $v, $content_type, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'servicesCancel'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\ServicesCancelRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function servicesCancelRequest($api_key, $v, $content_type, $body)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling servicesCancel'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling servicesCancel'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling servicesCancel'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling servicesCancel'
            );
        }

        $resourcePath = '/accounts/me/cancelservices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation servicesList
     *
     * Services: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $sku  (required)
     * @param  string $location_id  (required)
     * @param  string $location_account_id  (required)
     * @param  string $status  (required)
     * @param  string $agreement_id  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function servicesList($api_key, $v, $sku, $location_id, $location_account_id, $status, $agreement_id, $limit, $offset)
    {
        $this->servicesListWithHttpInfo($api_key, $v, $sku, $location_id, $location_account_id, $status, $agreement_id, $limit, $offset);
    }

    /**
     * Operation servicesListWithHttpInfo
     *
     * Services: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $sku  (required)
     * @param  string $location_id  (required)
     * @param  string $location_account_id  (required)
     * @param  string $status  (required)
     * @param  string $agreement_id  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function servicesListWithHttpInfo($api_key, $v, $sku, $location_id, $location_account_id, $status, $agreement_id, $limit, $offset)
    {
        $returnType = '';
        $request = $this->servicesListRequest($api_key, $v, $sku, $location_id, $location_account_id, $status, $agreement_id, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation servicesListAsync
     *
     * Services: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $sku  (required)
     * @param  string $location_id  (required)
     * @param  string $location_account_id  (required)
     * @param  string $status  (required)
     * @param  string $agreement_id  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function servicesListAsync($api_key, $v, $sku, $location_id, $location_account_id, $status, $agreement_id, $limit, $offset)
    {
        return $this->servicesListAsyncWithHttpInfo($api_key, $v, $sku, $location_id, $location_account_id, $status, $agreement_id, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation servicesListAsyncWithHttpInfo
     *
     * Services: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $sku  (required)
     * @param  string $location_id  (required)
     * @param  string $location_account_id  (required)
     * @param  string $status  (required)
     * @param  string $agreement_id  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function servicesListAsyncWithHttpInfo($api_key, $v, $sku, $location_id, $location_account_id, $status, $agreement_id, $limit, $offset)
    {
        $returnType = '';
        $request = $this->servicesListRequest($api_key, $v, $sku, $location_id, $location_account_id, $status, $agreement_id, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'servicesList'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $sku  (required)
     * @param  string $location_id  (required)
     * @param  string $location_account_id  (required)
     * @param  string $status  (required)
     * @param  string $agreement_id  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function servicesListRequest($api_key, $v, $sku, $location_id, $location_account_id, $status, $agreement_id, $limit, $offset)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling servicesList'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling servicesList'
            );
        }
        // verify the required parameter 'sku' is set
        if ($sku === null || (is_array($sku) && count($sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku when calling servicesList'
            );
        }
        // verify the required parameter 'location_id' is set
        if ($location_id === null || (is_array($location_id) && count($location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_id when calling servicesList'
            );
        }
        // verify the required parameter 'location_account_id' is set
        if ($location_account_id === null || (is_array($location_account_id) && count($location_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_account_id when calling servicesList'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling servicesList'
            );
        }
        // verify the required parameter 'agreement_id' is set
        if ($agreement_id === null || (is_array($agreement_id) && count($agreement_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agreement_id when calling servicesList'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling servicesList'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling servicesList'
            );
        }

        $resourcePath = '/accounts/me/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($sku !== null) {
            $queryParams['sku'] = ObjectSerializer::toQueryValue($sku);
        }
        // query params
        if ($location_id !== null) {
            $queryParams['locationId'] = ObjectSerializer::toQueryValue($location_id);
        }
        // query params
        if ($location_account_id !== null) {
            $queryParams['locationAccountId'] = ObjectSerializer::toQueryValue($location_account_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($agreement_id !== null) {
            $queryParams['agreementId'] = ObjectSerializer::toQueryValue($agreement_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
