<?php
/**
 * LocationsLegacyApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * developer.yext.com (read-only)
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * LocationsLegacyApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LocationsLegacyApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getLocationsGet
     *
     * Locations: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $rendered  (required)
     * @param  string $location_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getLocationsGet($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id)
    {
        $this->getLocationsGetWithHttpInfo($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id);
    }

    /**
     * Operation getLocationsGetWithHttpInfo
     *
     * Locations: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $rendered  (required)
     * @param  string $location_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLocationsGetWithHttpInfo($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id)
    {
        $returnType = '';
        $request = $this->getLocationsGetRequest($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getLocationsGetAsync
     *
     * Locations: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $rendered  (required)
     * @param  string $location_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocationsGetAsync($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id)
    {
        return $this->getLocationsGetAsyncWithHttpInfo($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLocationsGetAsyncWithHttpInfo
     *
     * Locations: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $rendered  (required)
     * @param  string $location_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocationsGetAsyncWithHttpInfo($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id)
    {
        $returnType = '';
        $request = $this->getLocationsGetRequest($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLocationsGet'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $rendered  (required)
     * @param  string $location_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLocationsGetRequest($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling getLocationsGet'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling getLocationsGet'
            );
        }
        // verify the required parameter 'fields' is set
        if ($fields === null || (is_array($fields) && count($fields) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fields when calling getLocationsGet'
            );
        }
        // verify the required parameter 'resolve_placeholders' is set
        if ($resolve_placeholders === null || (is_array($resolve_placeholders) && count($resolve_placeholders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resolve_placeholders when calling getLocationsGet'
            );
        }
        // verify the required parameter 'rendered' is set
        if ($rendered === null || (is_array($rendered) && count($rendered) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rendered when calling getLocationsGet'
            );
        }
        // verify the required parameter 'location_id' is set
        if ($location_id === null || (is_array($location_id) && count($location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_id when calling getLocationsGet'
            );
        }

        $resourcePath = '/locations/{locationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($resolve_placeholders !== null) {
            $queryParams['resolvePlaceholders'] = ObjectSerializer::toQueryValue($resolve_placeholders);
        }
        // query params
        if ($rendered !== null) {
            $queryParams['rendered'] = ObjectSerializer::toQueryValue($rendered);
        }

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationId' . '}',
                ObjectSerializer::toPathValue($location_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLocationsList
     *
     * Locations: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $languages  (required)
     * @param  string $fields  (required)
     * @param  string $filters  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $sort_by  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getLocationsList($api_key, $v, $limit, $offset, $languages, $fields, $filters, $resolve_placeholders, $sort_by)
    {
        $this->getLocationsListWithHttpInfo($api_key, $v, $limit, $offset, $languages, $fields, $filters, $resolve_placeholders, $sort_by);
    }

    /**
     * Operation getLocationsListWithHttpInfo
     *
     * Locations: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $languages  (required)
     * @param  string $fields  (required)
     * @param  string $filters  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $sort_by  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLocationsListWithHttpInfo($api_key, $v, $limit, $offset, $languages, $fields, $filters, $resolve_placeholders, $sort_by)
    {
        $returnType = '';
        $request = $this->getLocationsListRequest($api_key, $v, $limit, $offset, $languages, $fields, $filters, $resolve_placeholders, $sort_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getLocationsListAsync
     *
     * Locations: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $languages  (required)
     * @param  string $fields  (required)
     * @param  string $filters  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $sort_by  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocationsListAsync($api_key, $v, $limit, $offset, $languages, $fields, $filters, $resolve_placeholders, $sort_by)
    {
        return $this->getLocationsListAsyncWithHttpInfo($api_key, $v, $limit, $offset, $languages, $fields, $filters, $resolve_placeholders, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLocationsListAsyncWithHttpInfo
     *
     * Locations: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $languages  (required)
     * @param  string $fields  (required)
     * @param  string $filters  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $sort_by  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocationsListAsyncWithHttpInfo($api_key, $v, $limit, $offset, $languages, $fields, $filters, $resolve_placeholders, $sort_by)
    {
        $returnType = '';
        $request = $this->getLocationsListRequest($api_key, $v, $limit, $offset, $languages, $fields, $filters, $resolve_placeholders, $sort_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLocationsList'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $languages  (required)
     * @param  string $fields  (required)
     * @param  string $filters  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $sort_by  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLocationsListRequest($api_key, $v, $limit, $offset, $languages, $fields, $filters, $resolve_placeholders, $sort_by)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling getLocationsList'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling getLocationsList'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling getLocationsList'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling getLocationsList'
            );
        }
        // verify the required parameter 'languages' is set
        if ($languages === null || (is_array($languages) && count($languages) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $languages when calling getLocationsList'
            );
        }
        // verify the required parameter 'fields' is set
        if ($fields === null || (is_array($fields) && count($fields) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fields when calling getLocationsList'
            );
        }
        // verify the required parameter 'filters' is set
        if ($filters === null || (is_array($filters) && count($filters) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filters when calling getLocationsList'
            );
        }
        // verify the required parameter 'resolve_placeholders' is set
        if ($resolve_placeholders === null || (is_array($resolve_placeholders) && count($resolve_placeholders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resolve_placeholders when calling getLocationsList'
            );
        }
        // verify the required parameter 'sort_by' is set
        if ($sort_by === null || (is_array($sort_by) && count($sort_by) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort_by when calling getLocationsList'
            );
        }

        $resourcePath = '/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($languages !== null) {
            $queryParams['languages'] = ObjectSerializer::toQueryValue($languages);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = ObjectSerializer::toQueryValue($filters);
        }
        // query params
        if ($resolve_placeholders !== null) {
            $queryParams['resolvePlaceholders'] = ObjectSerializer::toQueryValue($resolve_placeholders);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation languageProfilesGet
     *
     * Language Profiles: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $rendered  (required)
     * @param  string $location_id  (required)
     * @param  string $language_code  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function languageProfilesGet($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id, $language_code)
    {
        $this->languageProfilesGetWithHttpInfo($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id, $language_code);
    }

    /**
     * Operation languageProfilesGetWithHttpInfo
     *
     * Language Profiles: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $rendered  (required)
     * @param  string $location_id  (required)
     * @param  string $language_code  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function languageProfilesGetWithHttpInfo($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id, $language_code)
    {
        $returnType = '';
        $request = $this->languageProfilesGetRequest($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id, $language_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation languageProfilesGetAsync
     *
     * Language Profiles: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $rendered  (required)
     * @param  string $location_id  (required)
     * @param  string $language_code  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function languageProfilesGetAsync($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id, $language_code)
    {
        return $this->languageProfilesGetAsyncWithHttpInfo($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id, $language_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation languageProfilesGetAsyncWithHttpInfo
     *
     * Language Profiles: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $rendered  (required)
     * @param  string $location_id  (required)
     * @param  string $language_code  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function languageProfilesGetAsyncWithHttpInfo($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id, $language_code)
    {
        $returnType = '';
        $request = $this->languageProfilesGetRequest($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id, $language_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'languageProfilesGet'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $rendered  (required)
     * @param  string $location_id  (required)
     * @param  string $language_code  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function languageProfilesGetRequest($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id, $language_code)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling languageProfilesGet'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling languageProfilesGet'
            );
        }
        // verify the required parameter 'fields' is set
        if ($fields === null || (is_array($fields) && count($fields) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fields when calling languageProfilesGet'
            );
        }
        // verify the required parameter 'resolve_placeholders' is set
        if ($resolve_placeholders === null || (is_array($resolve_placeholders) && count($resolve_placeholders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resolve_placeholders when calling languageProfilesGet'
            );
        }
        // verify the required parameter 'rendered' is set
        if ($rendered === null || (is_array($rendered) && count($rendered) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rendered when calling languageProfilesGet'
            );
        }
        // verify the required parameter 'location_id' is set
        if ($location_id === null || (is_array($location_id) && count($location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_id when calling languageProfilesGet'
            );
        }
        // verify the required parameter 'language_code' is set
        if ($language_code === null || (is_array($language_code) && count($language_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language_code when calling languageProfilesGet'
            );
        }

        $resourcePath = '/locations/{locationId}/profiles/{languageCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($resolve_placeholders !== null) {
            $queryParams['resolvePlaceholders'] = ObjectSerializer::toQueryValue($resolve_placeholders);
        }
        // query params
        if ($rendered !== null) {
            $queryParams['rendered'] = ObjectSerializer::toQueryValue($rendered);
        }

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationId' . '}',
                ObjectSerializer::toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($language_code !== null) {
            $resourcePath = str_replace(
                '{' . 'languageCode' . '}',
                ObjectSerializer::toPathValue($language_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation languageProfilesList
     *
     * Language Profiles: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $rendered  (required)
     * @param  string $location_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function languageProfilesList($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id)
    {
        $this->languageProfilesListWithHttpInfo($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id);
    }

    /**
     * Operation languageProfilesListWithHttpInfo
     *
     * Language Profiles: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $rendered  (required)
     * @param  string $location_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function languageProfilesListWithHttpInfo($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id)
    {
        $returnType = '';
        $request = $this->languageProfilesListRequest($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation languageProfilesListAsync
     *
     * Language Profiles: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $rendered  (required)
     * @param  string $location_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function languageProfilesListAsync($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id)
    {
        return $this->languageProfilesListAsyncWithHttpInfo($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation languageProfilesListAsyncWithHttpInfo
     *
     * Language Profiles: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $rendered  (required)
     * @param  string $location_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function languageProfilesListAsyncWithHttpInfo($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id)
    {
        $returnType = '';
        $request = $this->languageProfilesListRequest($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'languageProfilesList'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $rendered  (required)
     * @param  string $location_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function languageProfilesListRequest($api_key, $v, $fields, $resolve_placeholders, $rendered, $location_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling languageProfilesList'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling languageProfilesList'
            );
        }
        // verify the required parameter 'fields' is set
        if ($fields === null || (is_array($fields) && count($fields) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fields when calling languageProfilesList'
            );
        }
        // verify the required parameter 'resolve_placeholders' is set
        if ($resolve_placeholders === null || (is_array($resolve_placeholders) && count($resolve_placeholders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resolve_placeholders when calling languageProfilesList'
            );
        }
        // verify the required parameter 'rendered' is set
        if ($rendered === null || (is_array($rendered) && count($rendered) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rendered when calling languageProfilesList'
            );
        }
        // verify the required parameter 'location_id' is set
        if ($location_id === null || (is_array($location_id) && count($location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_id when calling languageProfilesList'
            );
        }

        $resourcePath = '/locations/{locationId}/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($resolve_placeholders !== null) {
            $queryParams['resolvePlaceholders'] = ObjectSerializer::toQueryValue($resolve_placeholders);
        }
        // query params
        if ($rendered !== null) {
            $queryParams['rendered'] = ObjectSerializer::toQueryValue($rendered);
        }

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationId' . '}',
                ObjectSerializer::toPathValue($location_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation languageProfilesSchemaGet
     *
     * Language Profiles Schema: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_id  (required)
     * @param  string $language_code  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function languageProfilesSchemaGet($api_key, $v, $location_id, $language_code)
    {
        $this->languageProfilesSchemaGetWithHttpInfo($api_key, $v, $location_id, $language_code);
    }

    /**
     * Operation languageProfilesSchemaGetWithHttpInfo
     *
     * Language Profiles Schema: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_id  (required)
     * @param  string $language_code  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function languageProfilesSchemaGetWithHttpInfo($api_key, $v, $location_id, $language_code)
    {
        $returnType = '';
        $request = $this->languageProfilesSchemaGetRequest($api_key, $v, $location_id, $language_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation languageProfilesSchemaGetAsync
     *
     * Language Profiles Schema: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_id  (required)
     * @param  string $language_code  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function languageProfilesSchemaGetAsync($api_key, $v, $location_id, $language_code)
    {
        return $this->languageProfilesSchemaGetAsyncWithHttpInfo($api_key, $v, $location_id, $language_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation languageProfilesSchemaGetAsyncWithHttpInfo
     *
     * Language Profiles Schema: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_id  (required)
     * @param  string $language_code  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function languageProfilesSchemaGetAsyncWithHttpInfo($api_key, $v, $location_id, $language_code)
    {
        $returnType = '';
        $request = $this->languageProfilesSchemaGetRequest($api_key, $v, $location_id, $language_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'languageProfilesSchemaGet'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_id  (required)
     * @param  string $language_code  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function languageProfilesSchemaGetRequest($api_key, $v, $location_id, $language_code)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling languageProfilesSchemaGet'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling languageProfilesSchemaGet'
            );
        }
        // verify the required parameter 'location_id' is set
        if ($location_id === null || (is_array($location_id) && count($location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_id when calling languageProfilesSchemaGet'
            );
        }
        // verify the required parameter 'language_code' is set
        if ($language_code === null || (is_array($language_code) && count($language_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language_code when calling languageProfilesSchemaGet'
            );
        }

        $resourcePath = '/locations/{locationId}/profiles/{languageCode}/schema';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationId' . '}',
                ObjectSerializer::toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($language_code !== null) {
            $resourcePath = str_replace(
                '{' . 'languageCode' . '}',
                ObjectSerializer::toPathValue($language_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation locationsCreate
     *
     * Locations Create
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\LocationsCreateRequest $body  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function locationsCreate($api_key, $v, $content_type, $body, $account_id)
    {
        $this->locationsCreateWithHttpInfo($api_key, $v, $content_type, $body, $account_id);
    }

    /**
     * Operation locationsCreateWithHttpInfo
     *
     * Locations Create
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\LocationsCreateRequest $body  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function locationsCreateWithHttpInfo($api_key, $v, $content_type, $body, $account_id)
    {
        $returnType = '';
        $request = $this->locationsCreateRequest($api_key, $v, $content_type, $body, $account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation locationsCreateAsync
     *
     * Locations Create
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\LocationsCreateRequest $body  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationsCreateAsync($api_key, $v, $content_type, $body, $account_id)
    {
        return $this->locationsCreateAsyncWithHttpInfo($api_key, $v, $content_type, $body, $account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation locationsCreateAsyncWithHttpInfo
     *
     * Locations Create
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\LocationsCreateRequest $body  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationsCreateAsyncWithHttpInfo($api_key, $v, $content_type, $body, $account_id)
    {
        $returnType = '';
        $request = $this->locationsCreateRequest($api_key, $v, $content_type, $body, $account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'locationsCreate'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\LocationsCreateRequest $body  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function locationsCreateRequest($api_key, $v, $content_type, $body, $account_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling locationsCreate'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling locationsCreate'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling locationsCreate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling locationsCreate'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling locationsCreate'
            );
        }

        $resourcePath = '/accounts/{accountId}/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation locationsGeoSearch
     *
     * Locations: GeoSearch
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location  (required)
     * @param  string $radius  (required)
     * @param  string $geocoder_bias  (required)
     * @param  string $languages  (required)
     * @param  string $fields  (required)
     * @param  string $filters  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $sort_by  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function locationsGeoSearch($api_key, $v, $limit, $offset, $location, $radius, $geocoder_bias, $languages, $fields, $filters, $resolve_placeholders, $sort_by)
    {
        $this->locationsGeoSearchWithHttpInfo($api_key, $v, $limit, $offset, $location, $radius, $geocoder_bias, $languages, $fields, $filters, $resolve_placeholders, $sort_by);
    }

    /**
     * Operation locationsGeoSearchWithHttpInfo
     *
     * Locations: GeoSearch
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location  (required)
     * @param  string $radius  (required)
     * @param  string $geocoder_bias  (required)
     * @param  string $languages  (required)
     * @param  string $fields  (required)
     * @param  string $filters  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $sort_by  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function locationsGeoSearchWithHttpInfo($api_key, $v, $limit, $offset, $location, $radius, $geocoder_bias, $languages, $fields, $filters, $resolve_placeholders, $sort_by)
    {
        $returnType = '';
        $request = $this->locationsGeoSearchRequest($api_key, $v, $limit, $offset, $location, $radius, $geocoder_bias, $languages, $fields, $filters, $resolve_placeholders, $sort_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation locationsGeoSearchAsync
     *
     * Locations: GeoSearch
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location  (required)
     * @param  string $radius  (required)
     * @param  string $geocoder_bias  (required)
     * @param  string $languages  (required)
     * @param  string $fields  (required)
     * @param  string $filters  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $sort_by  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationsGeoSearchAsync($api_key, $v, $limit, $offset, $location, $radius, $geocoder_bias, $languages, $fields, $filters, $resolve_placeholders, $sort_by)
    {
        return $this->locationsGeoSearchAsyncWithHttpInfo($api_key, $v, $limit, $offset, $location, $radius, $geocoder_bias, $languages, $fields, $filters, $resolve_placeholders, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation locationsGeoSearchAsyncWithHttpInfo
     *
     * Locations: GeoSearch
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location  (required)
     * @param  string $radius  (required)
     * @param  string $geocoder_bias  (required)
     * @param  string $languages  (required)
     * @param  string $fields  (required)
     * @param  string $filters  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $sort_by  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationsGeoSearchAsyncWithHttpInfo($api_key, $v, $limit, $offset, $location, $radius, $geocoder_bias, $languages, $fields, $filters, $resolve_placeholders, $sort_by)
    {
        $returnType = '';
        $request = $this->locationsGeoSearchRequest($api_key, $v, $limit, $offset, $location, $radius, $geocoder_bias, $languages, $fields, $filters, $resolve_placeholders, $sort_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'locationsGeoSearch'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $location  (required)
     * @param  string $radius  (required)
     * @param  string $geocoder_bias  (required)
     * @param  string $languages  (required)
     * @param  string $fields  (required)
     * @param  string $filters  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $sort_by  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function locationsGeoSearchRequest($api_key, $v, $limit, $offset, $location, $radius, $geocoder_bias, $languages, $fields, $filters, $resolve_placeholders, $sort_by)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling locationsGeoSearch'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling locationsGeoSearch'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling locationsGeoSearch'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling locationsGeoSearch'
            );
        }
        // verify the required parameter 'location' is set
        if ($location === null || (is_array($location) && count($location) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location when calling locationsGeoSearch'
            );
        }
        // verify the required parameter 'radius' is set
        if ($radius === null || (is_array($radius) && count($radius) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $radius when calling locationsGeoSearch'
            );
        }
        // verify the required parameter 'geocoder_bias' is set
        if ($geocoder_bias === null || (is_array($geocoder_bias) && count($geocoder_bias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $geocoder_bias when calling locationsGeoSearch'
            );
        }
        // verify the required parameter 'languages' is set
        if ($languages === null || (is_array($languages) && count($languages) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $languages when calling locationsGeoSearch'
            );
        }
        // verify the required parameter 'fields' is set
        if ($fields === null || (is_array($fields) && count($fields) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fields when calling locationsGeoSearch'
            );
        }
        // verify the required parameter 'filters' is set
        if ($filters === null || (is_array($filters) && count($filters) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filters when calling locationsGeoSearch'
            );
        }
        // verify the required parameter 'resolve_placeholders' is set
        if ($resolve_placeholders === null || (is_array($resolve_placeholders) && count($resolve_placeholders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resolve_placeholders when calling locationsGeoSearch'
            );
        }
        // verify the required parameter 'sort_by' is set
        if ($sort_by === null || (is_array($sort_by) && count($sort_by) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort_by when calling locationsGeoSearch'
            );
        }

        $resourcePath = '/locations/geosearch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = ObjectSerializer::toQueryValue($location);
        }
        // query params
        if ($radius !== null) {
            $queryParams['radius'] = ObjectSerializer::toQueryValue($radius);
        }
        // query params
        if ($geocoder_bias !== null) {
            $queryParams['geocoderBias'] = ObjectSerializer::toQueryValue($geocoder_bias);
        }
        // query params
        if ($languages !== null) {
            $queryParams['languages'] = ObjectSerializer::toQueryValue($languages);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = ObjectSerializer::toQueryValue($filters);
        }
        // query params
        if ($resolve_placeholders !== null) {
            $queryParams['resolvePlaceholders'] = ObjectSerializer::toQueryValue($resolve_placeholders);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation locationsGet
     *
     * Locations: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $resolve_place_holders  (required)
     * @param  string $account_id  (required)
     * @param  string $location_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function locationsGet($api_key, $v, $resolve_place_holders, $account_id, $location_id)
    {
        $this->locationsGetWithHttpInfo($api_key, $v, $resolve_place_holders, $account_id, $location_id);
    }

    /**
     * Operation locationsGetWithHttpInfo
     *
     * Locations: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $resolve_place_holders  (required)
     * @param  string $account_id  (required)
     * @param  string $location_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function locationsGetWithHttpInfo($api_key, $v, $resolve_place_holders, $account_id, $location_id)
    {
        $returnType = '';
        $request = $this->locationsGetRequest($api_key, $v, $resolve_place_holders, $account_id, $location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation locationsGetAsync
     *
     * Locations: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $resolve_place_holders  (required)
     * @param  string $account_id  (required)
     * @param  string $location_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationsGetAsync($api_key, $v, $resolve_place_holders, $account_id, $location_id)
    {
        return $this->locationsGetAsyncWithHttpInfo($api_key, $v, $resolve_place_holders, $account_id, $location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation locationsGetAsyncWithHttpInfo
     *
     * Locations: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $resolve_place_holders  (required)
     * @param  string $account_id  (required)
     * @param  string $location_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationsGetAsyncWithHttpInfo($api_key, $v, $resolve_place_holders, $account_id, $location_id)
    {
        $returnType = '';
        $request = $this->locationsGetRequest($api_key, $v, $resolve_place_holders, $account_id, $location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'locationsGet'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $resolve_place_holders  (required)
     * @param  string $account_id  (required)
     * @param  string $location_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function locationsGetRequest($api_key, $v, $resolve_place_holders, $account_id, $location_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling locationsGet'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling locationsGet'
            );
        }
        // verify the required parameter 'resolve_place_holders' is set
        if ($resolve_place_holders === null || (is_array($resolve_place_holders) && count($resolve_place_holders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resolve_place_holders when calling locationsGet'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling locationsGet'
            );
        }
        // verify the required parameter 'location_id' is set
        if ($location_id === null || (is_array($location_id) && count($location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_id when calling locationsGet'
            );
        }

        $resourcePath = '/accounts/{accountId}/locations/{locationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($resolve_place_holders !== null) {
            $queryParams['resolvePlaceHolders'] = ObjectSerializer::toQueryValue($resolve_place_holders);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationId' . '}',
                ObjectSerializer::toPathValue($location_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation locationsList
     *
     * Locations: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $page_token  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function locationsList($api_key, $v, $limit, $offset, $resolve_placeholders, $page_token, $account_id)
    {
        $this->locationsListWithHttpInfo($api_key, $v, $limit, $offset, $resolve_placeholders, $page_token, $account_id);
    }

    /**
     * Operation locationsListWithHttpInfo
     *
     * Locations: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $page_token  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function locationsListWithHttpInfo($api_key, $v, $limit, $offset, $resolve_placeholders, $page_token, $account_id)
    {
        $returnType = '';
        $request = $this->locationsListRequest($api_key, $v, $limit, $offset, $resolve_placeholders, $page_token, $account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation locationsListAsync
     *
     * Locations: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $page_token  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationsListAsync($api_key, $v, $limit, $offset, $resolve_placeholders, $page_token, $account_id)
    {
        return $this->locationsListAsyncWithHttpInfo($api_key, $v, $limit, $offset, $resolve_placeholders, $page_token, $account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation locationsListAsyncWithHttpInfo
     *
     * Locations: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $page_token  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationsListAsyncWithHttpInfo($api_key, $v, $limit, $offset, $resolve_placeholders, $page_token, $account_id)
    {
        $returnType = '';
        $request = $this->locationsListRequest($api_key, $v, $limit, $offset, $resolve_placeholders, $page_token, $account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'locationsList'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $page_token  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function locationsListRequest($api_key, $v, $limit, $offset, $resolve_placeholders, $page_token, $account_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling locationsList'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling locationsList'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling locationsList'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling locationsList'
            );
        }
        // verify the required parameter 'resolve_placeholders' is set
        if ($resolve_placeholders === null || (is_array($resolve_placeholders) && count($resolve_placeholders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resolve_placeholders when calling locationsList'
            );
        }
        // verify the required parameter 'page_token' is set
        if ($page_token === null || (is_array($page_token) && count($page_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_token when calling locationsList'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling locationsList'
            );
        }

        $resourcePath = '/accounts/{accountId}/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($resolve_placeholders !== null) {
            $queryParams['resolvePlaceholders'] = ObjectSerializer::toQueryValue($resolve_placeholders);
        }
        // query params
        if ($page_token !== null) {
            $queryParams['pageToken'] = ObjectSerializer::toQueryValue($page_token);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation locationsSchemaGet
     *
     * Locations Schema: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function locationsSchemaGet($api_key, $v, $location_id)
    {
        $this->locationsSchemaGetWithHttpInfo($api_key, $v, $location_id);
    }

    /**
     * Operation locationsSchemaGetWithHttpInfo
     *
     * Locations Schema: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function locationsSchemaGetWithHttpInfo($api_key, $v, $location_id)
    {
        $returnType = '';
        $request = $this->locationsSchemaGetRequest($api_key, $v, $location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation locationsSchemaGetAsync
     *
     * Locations Schema: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationsSchemaGetAsync($api_key, $v, $location_id)
    {
        return $this->locationsSchemaGetAsyncWithHttpInfo($api_key, $v, $location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation locationsSchemaGetAsyncWithHttpInfo
     *
     * Locations Schema: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationsSchemaGetAsyncWithHttpInfo($api_key, $v, $location_id)
    {
        $returnType = '';
        $request = $this->locationsSchemaGetRequest($api_key, $v, $location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'locationsSchemaGet'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function locationsSchemaGetRequest($api_key, $v, $location_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling locationsSchemaGet'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling locationsSchemaGet'
            );
        }
        // verify the required parameter 'location_id' is set
        if ($location_id === null || (is_array($location_id) && count($location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_id when calling locationsSchemaGet'
            );
        }

        $resourcePath = '/locations/{locationId}/schema';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationId' . '}',
                ObjectSerializer::toPathValue($location_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation locationsSearch
     *
     * Locations: Search
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $filters  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function locationsSearch($api_key, $v, $limit, $offset, $filters, $account_id)
    {
        $this->locationsSearchWithHttpInfo($api_key, $v, $limit, $offset, $filters, $account_id);
    }

    /**
     * Operation locationsSearchWithHttpInfo
     *
     * Locations: Search
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $filters  (required)
     * @param  string $account_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function locationsSearchWithHttpInfo($api_key, $v, $limit, $offset, $filters, $account_id)
    {
        $returnType = '';
        $request = $this->locationsSearchRequest($api_key, $v, $limit, $offset, $filters, $account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation locationsSearchAsync
     *
     * Locations: Search
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $filters  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationsSearchAsync($api_key, $v, $limit, $offset, $filters, $account_id)
    {
        return $this->locationsSearchAsyncWithHttpInfo($api_key, $v, $limit, $offset, $filters, $account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation locationsSearchAsyncWithHttpInfo
     *
     * Locations: Search
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $filters  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationsSearchAsyncWithHttpInfo($api_key, $v, $limit, $offset, $filters, $account_id)
    {
        $returnType = '';
        $request = $this->locationsSearchRequest($api_key, $v, $limit, $offset, $filters, $account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'locationsSearch'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $filters  (required)
     * @param  string $account_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function locationsSearchRequest($api_key, $v, $limit, $offset, $filters, $account_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling locationsSearch'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling locationsSearch'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling locationsSearch'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling locationsSearch'
            );
        }
        // verify the required parameter 'filters' is set
        if ($filters === null || (is_array($filters) && count($filters) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filters when calling locationsSearch'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling locationsSearch'
            );
        }

        $resourcePath = '/accounts/{accountId}/locationsearch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = ObjectSerializer::toQueryValue($filters);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation locationsUpdate
     *
     * Locations: Update
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\LocationsUpdateRequest $body  (required)
     * @param  string $account_id  (required)
     * @param  string $location_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function locationsUpdate($api_key, $v, $content_type, $body, $account_id, $location_id)
    {
        $this->locationsUpdateWithHttpInfo($api_key, $v, $content_type, $body, $account_id, $location_id);
    }

    /**
     * Operation locationsUpdateWithHttpInfo
     *
     * Locations: Update
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\LocationsUpdateRequest $body  (required)
     * @param  string $account_id  (required)
     * @param  string $location_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function locationsUpdateWithHttpInfo($api_key, $v, $content_type, $body, $account_id, $location_id)
    {
        $returnType = '';
        $request = $this->locationsUpdateRequest($api_key, $v, $content_type, $body, $account_id, $location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation locationsUpdateAsync
     *
     * Locations: Update
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\LocationsUpdateRequest $body  (required)
     * @param  string $account_id  (required)
     * @param  string $location_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationsUpdateAsync($api_key, $v, $content_type, $body, $account_id, $location_id)
    {
        return $this->locationsUpdateAsyncWithHttpInfo($api_key, $v, $content_type, $body, $account_id, $location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation locationsUpdateAsyncWithHttpInfo
     *
     * Locations: Update
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\LocationsUpdateRequest $body  (required)
     * @param  string $account_id  (required)
     * @param  string $location_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationsUpdateAsyncWithHttpInfo($api_key, $v, $content_type, $body, $account_id, $location_id)
    {
        $returnType = '';
        $request = $this->locationsUpdateRequest($api_key, $v, $content_type, $body, $account_id, $location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'locationsUpdate'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $content_type  (required)
     * @param  \Swagger\Client\Model\LocationsUpdateRequest $body  (required)
     * @param  string $account_id  (required)
     * @param  string $location_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function locationsUpdateRequest($api_key, $v, $content_type, $body, $account_id, $location_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling locationsUpdate'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling locationsUpdate'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling locationsUpdate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling locationsUpdate'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling locationsUpdate'
            );
        }
        // verify the required parameter 'location_id' is set
        if ($location_id === null || (is_array($location_id) && count($location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_id when calling locationsUpdate'
            );
        }

        $resourcePath = '/accounts/{accountId}/locations/{locationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationId' . '}',
                ObjectSerializer::toPathValue($location_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
