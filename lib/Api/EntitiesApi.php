<?php
/**
 * EntitiesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * developer.yext.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * EntitiesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EntitiesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation entitiesGeosearch
     *
     * Entities: Geosearch
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location  (required)
     * @param  string $radius  (required)
     * @param  string $geocoder_bias  (required)
     * @param  string $country_bias  (required)
     * @param  string $entity_types  (required)
     * @param  string $languages  (required)
     * @param  string $filter  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $randomization  (required)
     * @param  string $randomization_token  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function entitiesGeosearch($api_key, $v, $location, $radius, $geocoder_bias, $country_bias, $entity_types, $languages, $filter, $limit, $offset, $fields, $resolve_placeholders, $randomization, $randomization_token)
    {
        $this->entitiesGeosearchWithHttpInfo($api_key, $v, $location, $radius, $geocoder_bias, $country_bias, $entity_types, $languages, $filter, $limit, $offset, $fields, $resolve_placeholders, $randomization, $randomization_token);
    }

    /**
     * Operation entitiesGeosearchWithHttpInfo
     *
     * Entities: Geosearch
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location  (required)
     * @param  string $radius  (required)
     * @param  string $geocoder_bias  (required)
     * @param  string $country_bias  (required)
     * @param  string $entity_types  (required)
     * @param  string $languages  (required)
     * @param  string $filter  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $randomization  (required)
     * @param  string $randomization_token  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function entitiesGeosearchWithHttpInfo($api_key, $v, $location, $radius, $geocoder_bias, $country_bias, $entity_types, $languages, $filter, $limit, $offset, $fields, $resolve_placeholders, $randomization, $randomization_token)
    {
        $returnType = '';
        $request = $this->entitiesGeosearchRequest($api_key, $v, $location, $radius, $geocoder_bias, $country_bias, $entity_types, $languages, $filter, $limit, $offset, $fields, $resolve_placeholders, $randomization, $randomization_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation entitiesGeosearchAsync
     *
     * Entities: Geosearch
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location  (required)
     * @param  string $radius  (required)
     * @param  string $geocoder_bias  (required)
     * @param  string $country_bias  (required)
     * @param  string $entity_types  (required)
     * @param  string $languages  (required)
     * @param  string $filter  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $randomization  (required)
     * @param  string $randomization_token  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitiesGeosearchAsync($api_key, $v, $location, $radius, $geocoder_bias, $country_bias, $entity_types, $languages, $filter, $limit, $offset, $fields, $resolve_placeholders, $randomization, $randomization_token)
    {
        return $this->entitiesGeosearchAsyncWithHttpInfo($api_key, $v, $location, $radius, $geocoder_bias, $country_bias, $entity_types, $languages, $filter, $limit, $offset, $fields, $resolve_placeholders, $randomization, $randomization_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation entitiesGeosearchAsyncWithHttpInfo
     *
     * Entities: Geosearch
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location  (required)
     * @param  string $radius  (required)
     * @param  string $geocoder_bias  (required)
     * @param  string $country_bias  (required)
     * @param  string $entity_types  (required)
     * @param  string $languages  (required)
     * @param  string $filter  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $randomization  (required)
     * @param  string $randomization_token  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entitiesGeosearchAsyncWithHttpInfo($api_key, $v, $location, $radius, $geocoder_bias, $country_bias, $entity_types, $languages, $filter, $limit, $offset, $fields, $resolve_placeholders, $randomization, $randomization_token)
    {
        $returnType = '';
        $request = $this->entitiesGeosearchRequest($api_key, $v, $location, $radius, $geocoder_bias, $country_bias, $entity_types, $languages, $filter, $limit, $offset, $fields, $resolve_placeholders, $randomization, $randomization_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'entitiesGeosearch'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $location  (required)
     * @param  string $radius  (required)
     * @param  string $geocoder_bias  (required)
     * @param  string $country_bias  (required)
     * @param  string $entity_types  (required)
     * @param  string $languages  (required)
     * @param  string $filter  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $fields  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $randomization  (required)
     * @param  string $randomization_token  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function entitiesGeosearchRequest($api_key, $v, $location, $radius, $geocoder_bias, $country_bias, $entity_types, $languages, $filter, $limit, $offset, $fields, $resolve_placeholders, $randomization, $randomization_token)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling entitiesGeosearch'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling entitiesGeosearch'
            );
        }
        // verify the required parameter 'location' is set
        if ($location === null || (is_array($location) && count($location) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location when calling entitiesGeosearch'
            );
        }
        // verify the required parameter 'radius' is set
        if ($radius === null || (is_array($radius) && count($radius) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $radius when calling entitiesGeosearch'
            );
        }
        // verify the required parameter 'geocoder_bias' is set
        if ($geocoder_bias === null || (is_array($geocoder_bias) && count($geocoder_bias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $geocoder_bias when calling entitiesGeosearch'
            );
        }
        // verify the required parameter 'country_bias' is set
        if ($country_bias === null || (is_array($country_bias) && count($country_bias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_bias when calling entitiesGeosearch'
            );
        }
        // verify the required parameter 'entity_types' is set
        if ($entity_types === null || (is_array($entity_types) && count($entity_types) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity_types when calling entitiesGeosearch'
            );
        }
        // verify the required parameter 'languages' is set
        if ($languages === null || (is_array($languages) && count($languages) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $languages when calling entitiesGeosearch'
            );
        }
        // verify the required parameter 'filter' is set
        if ($filter === null || (is_array($filter) && count($filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter when calling entitiesGeosearch'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling entitiesGeosearch'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling entitiesGeosearch'
            );
        }
        // verify the required parameter 'fields' is set
        if ($fields === null || (is_array($fields) && count($fields) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fields when calling entitiesGeosearch'
            );
        }
        // verify the required parameter 'resolve_placeholders' is set
        if ($resolve_placeholders === null || (is_array($resolve_placeholders) && count($resolve_placeholders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resolve_placeholders when calling entitiesGeosearch'
            );
        }
        // verify the required parameter 'randomization' is set
        if ($randomization === null || (is_array($randomization) && count($randomization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $randomization when calling entitiesGeosearch'
            );
        }
        // verify the required parameter 'randomization_token' is set
        if ($randomization_token === null || (is_array($randomization_token) && count($randomization_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $randomization_token when calling entitiesGeosearch'
            );
        }

        $resourcePath = '/entities/geosearch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = ObjectSerializer::toQueryValue($location);
        }
        // query params
        if ($radius !== null) {
            $queryParams['radius'] = ObjectSerializer::toQueryValue($radius);
        }
        // query params
        if ($geocoder_bias !== null) {
            $queryParams['geocoderBias'] = ObjectSerializer::toQueryValue($geocoder_bias);
        }
        // query params
        if ($country_bias !== null) {
            $queryParams['countryBias'] = ObjectSerializer::toQueryValue($country_bias);
        }
        // query params
        if ($entity_types !== null) {
            $queryParams['entityTypes'] = ObjectSerializer::toQueryValue($entity_types);
        }
        // query params
        if ($languages !== null) {
            $queryParams['languages'] = ObjectSerializer::toQueryValue($languages);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($resolve_placeholders !== null) {
            $queryParams['resolvePlaceholders'] = ObjectSerializer::toQueryValue($resolve_placeholders);
        }
        // query params
        if ($randomization !== null) {
            $queryParams['randomization'] = ObjectSerializer::toQueryValue($randomization);
        }
        // query params
        if ($randomization_token !== null) {
            $queryParams['randomizationToken'] = ObjectSerializer::toQueryValue($randomization_token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation entityLanguageProfilesGet
     *
     * Entity Language Profiles: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $rendered  (required)
     * @param  string $entity_id  (required)
     * @param  string $language_code  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function entityLanguageProfilesGet($api_key, $v, $fields, $rendered, $entity_id, $language_code)
    {
        $this->entityLanguageProfilesGetWithHttpInfo($api_key, $v, $fields, $rendered, $entity_id, $language_code);
    }

    /**
     * Operation entityLanguageProfilesGetWithHttpInfo
     *
     * Entity Language Profiles: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $rendered  (required)
     * @param  string $entity_id  (required)
     * @param  string $language_code  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function entityLanguageProfilesGetWithHttpInfo($api_key, $v, $fields, $rendered, $entity_id, $language_code)
    {
        $returnType = '';
        $request = $this->entityLanguageProfilesGetRequest($api_key, $v, $fields, $rendered, $entity_id, $language_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation entityLanguageProfilesGetAsync
     *
     * Entity Language Profiles: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $rendered  (required)
     * @param  string $entity_id  (required)
     * @param  string $language_code  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entityLanguageProfilesGetAsync($api_key, $v, $fields, $rendered, $entity_id, $language_code)
    {
        return $this->entityLanguageProfilesGetAsyncWithHttpInfo($api_key, $v, $fields, $rendered, $entity_id, $language_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation entityLanguageProfilesGetAsyncWithHttpInfo
     *
     * Entity Language Profiles: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $rendered  (required)
     * @param  string $entity_id  (required)
     * @param  string $language_code  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entityLanguageProfilesGetAsyncWithHttpInfo($api_key, $v, $fields, $rendered, $entity_id, $language_code)
    {
        $returnType = '';
        $request = $this->entityLanguageProfilesGetRequest($api_key, $v, $fields, $rendered, $entity_id, $language_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'entityLanguageProfilesGet'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $rendered  (required)
     * @param  string $entity_id  (required)
     * @param  string $language_code  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function entityLanguageProfilesGetRequest($api_key, $v, $fields, $rendered, $entity_id, $language_code)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling entityLanguageProfilesGet'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling entityLanguageProfilesGet'
            );
        }
        // verify the required parameter 'fields' is set
        if ($fields === null || (is_array($fields) && count($fields) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fields when calling entityLanguageProfilesGet'
            );
        }
        // verify the required parameter 'rendered' is set
        if ($rendered === null || (is_array($rendered) && count($rendered) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rendered when calling entityLanguageProfilesGet'
            );
        }
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null || (is_array($entity_id) && count($entity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity_id when calling entityLanguageProfilesGet'
            );
        }
        // verify the required parameter 'language_code' is set
        if ($language_code === null || (is_array($language_code) && count($language_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language_code when calling entityLanguageProfilesGet'
            );
        }

        $resourcePath = '/entityprofiles/{entityId}/{languageCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($rendered !== null) {
            $queryParams['rendered'] = ObjectSerializer::toQueryValue($rendered);
        }

        // path params
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'entityId' . '}',
                ObjectSerializer::toPathValue($entity_id),
                $resourcePath
            );
        }
        // path params
        if ($language_code !== null) {
            $resourcePath = str_replace(
                '{' . 'languageCode' . '}',
                ObjectSerializer::toPathValue($language_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation entityLanguageProfilesList
     *
     * Entity Language Profiles: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $rendered  (required)
     * @param  string $language_codes  (required)
     * @param  string $entity_types  (required)
     * @param  string $entity_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function entityLanguageProfilesList($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $entity_id)
    {
        $this->entityLanguageProfilesListWithHttpInfo($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $entity_id);
    }

    /**
     * Operation entityLanguageProfilesListWithHttpInfo
     *
     * Entity Language Profiles: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $rendered  (required)
     * @param  string $language_codes  (required)
     * @param  string $entity_types  (required)
     * @param  string $entity_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function entityLanguageProfilesListWithHttpInfo($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $entity_id)
    {
        $returnType = '';
        $request = $this->entityLanguageProfilesListRequest($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $entity_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation entityLanguageProfilesListAsync
     *
     * Entity Language Profiles: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $rendered  (required)
     * @param  string $language_codes  (required)
     * @param  string $entity_types  (required)
     * @param  string $entity_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entityLanguageProfilesListAsync($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $entity_id)
    {
        return $this->entityLanguageProfilesListAsyncWithHttpInfo($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation entityLanguageProfilesListAsyncWithHttpInfo
     *
     * Entity Language Profiles: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $rendered  (required)
     * @param  string $language_codes  (required)
     * @param  string $entity_types  (required)
     * @param  string $entity_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entityLanguageProfilesListAsyncWithHttpInfo($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $entity_id)
    {
        $returnType = '';
        $request = $this->entityLanguageProfilesListRequest($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'entityLanguageProfilesList'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $rendered  (required)
     * @param  string $language_codes  (required)
     * @param  string $entity_types  (required)
     * @param  string $entity_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function entityLanguageProfilesListRequest($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $entity_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling entityLanguageProfilesList'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling entityLanguageProfilesList'
            );
        }
        // verify the required parameter 'fields' is set
        if ($fields === null || (is_array($fields) && count($fields) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fields when calling entityLanguageProfilesList'
            );
        }
        // verify the required parameter 'rendered' is set
        if ($rendered === null || (is_array($rendered) && count($rendered) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rendered when calling entityLanguageProfilesList'
            );
        }
        // verify the required parameter 'language_codes' is set
        if ($language_codes === null || (is_array($language_codes) && count($language_codes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language_codes when calling entityLanguageProfilesList'
            );
        }
        // verify the required parameter 'entity_types' is set
        if ($entity_types === null || (is_array($entity_types) && count($entity_types) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity_types when calling entityLanguageProfilesList'
            );
        }
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null || (is_array($entity_id) && count($entity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity_id when calling entityLanguageProfilesList'
            );
        }

        $resourcePath = '/entityprofiles/{entityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($rendered !== null) {
            $queryParams['rendered'] = ObjectSerializer::toQueryValue($rendered);
        }
        // query params
        if ($language_codes !== null) {
            $queryParams['languageCodes'] = ObjectSerializer::toQueryValue($language_codes);
        }
        // query params
        if ($entity_types !== null) {
            $queryParams['entityTypes'] = ObjectSerializer::toQueryValue($entity_types);
        }

        // path params
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'entityId' . '}',
                ObjectSerializer::toPathValue($entity_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation entityLanguageProfilesListAll
     *
     * Entity Language Profiles: List All
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $rendered  (required)
     * @param  string $language_codes  (required)
     * @param  string $entity_types  (required)
     * @param  string $filter  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $page_token  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function entityLanguageProfilesListAll($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $filter, $limit, $offset, $page_token)
    {
        $this->entityLanguageProfilesListAllWithHttpInfo($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $filter, $limit, $offset, $page_token);
    }

    /**
     * Operation entityLanguageProfilesListAllWithHttpInfo
     *
     * Entity Language Profiles: List All
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $rendered  (required)
     * @param  string $language_codes  (required)
     * @param  string $entity_types  (required)
     * @param  string $filter  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $page_token  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function entityLanguageProfilesListAllWithHttpInfo($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $filter, $limit, $offset, $page_token)
    {
        $returnType = '';
        $request = $this->entityLanguageProfilesListAllRequest($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $filter, $limit, $offset, $page_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation entityLanguageProfilesListAllAsync
     *
     * Entity Language Profiles: List All
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $rendered  (required)
     * @param  string $language_codes  (required)
     * @param  string $entity_types  (required)
     * @param  string $filter  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $page_token  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entityLanguageProfilesListAllAsync($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $filter, $limit, $offset, $page_token)
    {
        return $this->entityLanguageProfilesListAllAsyncWithHttpInfo($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $filter, $limit, $offset, $page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation entityLanguageProfilesListAllAsyncWithHttpInfo
     *
     * Entity Language Profiles: List All
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $rendered  (required)
     * @param  string $language_codes  (required)
     * @param  string $entity_types  (required)
     * @param  string $filter  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $page_token  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function entityLanguageProfilesListAllAsyncWithHttpInfo($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $filter, $limit, $offset, $page_token)
    {
        $returnType = '';
        $request = $this->entityLanguageProfilesListAllRequest($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $filter, $limit, $offset, $page_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'entityLanguageProfilesListAll'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $fields  (required)
     * @param  string $rendered  (required)
     * @param  string $language_codes  (required)
     * @param  string $entity_types  (required)
     * @param  string $filter  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $page_token  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function entityLanguageProfilesListAllRequest($api_key, $v, $fields, $rendered, $language_codes, $entity_types, $filter, $limit, $offset, $page_token)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling entityLanguageProfilesListAll'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling entityLanguageProfilesListAll'
            );
        }
        // verify the required parameter 'fields' is set
        if ($fields === null || (is_array($fields) && count($fields) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fields when calling entityLanguageProfilesListAll'
            );
        }
        // verify the required parameter 'rendered' is set
        if ($rendered === null || (is_array($rendered) && count($rendered) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rendered when calling entityLanguageProfilesListAll'
            );
        }
        // verify the required parameter 'language_codes' is set
        if ($language_codes === null || (is_array($language_codes) && count($language_codes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language_codes when calling entityLanguageProfilesListAll'
            );
        }
        // verify the required parameter 'entity_types' is set
        if ($entity_types === null || (is_array($entity_types) && count($entity_types) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity_types when calling entityLanguageProfilesListAll'
            );
        }
        // verify the required parameter 'filter' is set
        if ($filter === null || (is_array($filter) && count($filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter when calling entityLanguageProfilesListAll'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling entityLanguageProfilesListAll'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling entityLanguageProfilesListAll'
            );
        }
        // verify the required parameter 'page_token' is set
        if ($page_token === null || (is_array($page_token) && count($page_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_token when calling entityLanguageProfilesListAll'
            );
        }

        $resourcePath = '/entityprofiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($rendered !== null) {
            $queryParams['rendered'] = ObjectSerializer::toQueryValue($rendered);
        }
        // query params
        if ($language_codes !== null) {
            $queryParams['languageCodes'] = ObjectSerializer::toQueryValue($language_codes);
        }
        // query params
        if ($entity_types !== null) {
            $queryParams['entityTypes'] = ObjectSerializer::toQueryValue($entity_types);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($page_token !== null) {
            $queryParams['pageToken'] = ObjectSerializer::toQueryValue($page_token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEntitiesGet
     *
     * Entities: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $fields  (required)
     * @param  string $entity_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEntitiesGet($api_key, $v, $resolve_placeholders, $fields, $entity_id)
    {
        $this->getEntitiesGetWithHttpInfo($api_key, $v, $resolve_placeholders, $fields, $entity_id);
    }

    /**
     * Operation getEntitiesGetWithHttpInfo
     *
     * Entities: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $fields  (required)
     * @param  string $entity_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEntitiesGetWithHttpInfo($api_key, $v, $resolve_placeholders, $fields, $entity_id)
    {
        $returnType = '';
        $request = $this->getEntitiesGetRequest($api_key, $v, $resolve_placeholders, $fields, $entity_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEntitiesGetAsync
     *
     * Entities: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $fields  (required)
     * @param  string $entity_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntitiesGetAsync($api_key, $v, $resolve_placeholders, $fields, $entity_id)
    {
        return $this->getEntitiesGetAsyncWithHttpInfo($api_key, $v, $resolve_placeholders, $fields, $entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEntitiesGetAsyncWithHttpInfo
     *
     * Entities: Get
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $fields  (required)
     * @param  string $entity_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntitiesGetAsyncWithHttpInfo($api_key, $v, $resolve_placeholders, $fields, $entity_id)
    {
        $returnType = '';
        $request = $this->getEntitiesGetRequest($api_key, $v, $resolve_placeholders, $fields, $entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEntitiesGet'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $fields  (required)
     * @param  string $entity_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEntitiesGetRequest($api_key, $v, $resolve_placeholders, $fields, $entity_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling getEntitiesGet'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling getEntitiesGet'
            );
        }
        // verify the required parameter 'resolve_placeholders' is set
        if ($resolve_placeholders === null || (is_array($resolve_placeholders) && count($resolve_placeholders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resolve_placeholders when calling getEntitiesGet'
            );
        }
        // verify the required parameter 'fields' is set
        if ($fields === null || (is_array($fields) && count($fields) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fields when calling getEntitiesGet'
            );
        }
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null || (is_array($entity_id) && count($entity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity_id when calling getEntitiesGet'
            );
        }

        $resourcePath = '/entities/{entityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($resolve_placeholders !== null) {
            $queryParams['resolvePlaceholders'] = ObjectSerializer::toQueryValue($resolve_placeholders);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'entityId' . '}',
                ObjectSerializer::toPathValue($entity_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEntitiesList
     *
     * Entities: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $entity_types  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $languages  (required)
     * @param  string $fields  (required)
     * @param  string $filter  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $sort_by  (required)
     * @param  string $randomization  (required)
     * @param  string $randomization_token  (required)
     * @param  string $page_token  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEntitiesList($api_key, $v, $entity_types, $limit, $offset, $languages, $fields, $filter, $resolve_placeholders, $sort_by, $randomization, $randomization_token, $page_token)
    {
        $this->getEntitiesListWithHttpInfo($api_key, $v, $entity_types, $limit, $offset, $languages, $fields, $filter, $resolve_placeholders, $sort_by, $randomization, $randomization_token, $page_token);
    }

    /**
     * Operation getEntitiesListWithHttpInfo
     *
     * Entities: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $entity_types  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $languages  (required)
     * @param  string $fields  (required)
     * @param  string $filter  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $sort_by  (required)
     * @param  string $randomization  (required)
     * @param  string $randomization_token  (required)
     * @param  string $page_token  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEntitiesListWithHttpInfo($api_key, $v, $entity_types, $limit, $offset, $languages, $fields, $filter, $resolve_placeholders, $sort_by, $randomization, $randomization_token, $page_token)
    {
        $returnType = '';
        $request = $this->getEntitiesListRequest($api_key, $v, $entity_types, $limit, $offset, $languages, $fields, $filter, $resolve_placeholders, $sort_by, $randomization, $randomization_token, $page_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getEntitiesListAsync
     *
     * Entities: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $entity_types  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $languages  (required)
     * @param  string $fields  (required)
     * @param  string $filter  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $sort_by  (required)
     * @param  string $randomization  (required)
     * @param  string $randomization_token  (required)
     * @param  string $page_token  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntitiesListAsync($api_key, $v, $entity_types, $limit, $offset, $languages, $fields, $filter, $resolve_placeholders, $sort_by, $randomization, $randomization_token, $page_token)
    {
        return $this->getEntitiesListAsyncWithHttpInfo($api_key, $v, $entity_types, $limit, $offset, $languages, $fields, $filter, $resolve_placeholders, $sort_by, $randomization, $randomization_token, $page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEntitiesListAsyncWithHttpInfo
     *
     * Entities: List
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $entity_types  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $languages  (required)
     * @param  string $fields  (required)
     * @param  string $filter  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $sort_by  (required)
     * @param  string $randomization  (required)
     * @param  string $randomization_token  (required)
     * @param  string $page_token  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntitiesListAsyncWithHttpInfo($api_key, $v, $entity_types, $limit, $offset, $languages, $fields, $filter, $resolve_placeholders, $sort_by, $randomization, $randomization_token, $page_token)
    {
        $returnType = '';
        $request = $this->getEntitiesListRequest($api_key, $v, $entity_types, $limit, $offset, $languages, $fields, $filter, $resolve_placeholders, $sort_by, $randomization, $randomization_token, $page_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEntitiesList'
     *
     * @param  string $api_key  (required)
     * @param  string $v  (required)
     * @param  string $entity_types  (required)
     * @param  string $limit  (required)
     * @param  string $offset  (required)
     * @param  string $languages  (required)
     * @param  string $fields  (required)
     * @param  string $filter  (required)
     * @param  string $resolve_placeholders  (required)
     * @param  string $sort_by  (required)
     * @param  string $randomization  (required)
     * @param  string $randomization_token  (required)
     * @param  string $page_token  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEntitiesListRequest($api_key, $v, $entity_types, $limit, $offset, $languages, $fields, $filter, $resolve_placeholders, $sort_by, $randomization, $randomization_token, $page_token)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling getEntitiesList'
            );
        }
        // verify the required parameter 'v' is set
        if ($v === null || (is_array($v) && count($v) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v when calling getEntitiesList'
            );
        }
        // verify the required parameter 'entity_types' is set
        if ($entity_types === null || (is_array($entity_types) && count($entity_types) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity_types when calling getEntitiesList'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling getEntitiesList'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling getEntitiesList'
            );
        }
        // verify the required parameter 'languages' is set
        if ($languages === null || (is_array($languages) && count($languages) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $languages when calling getEntitiesList'
            );
        }
        // verify the required parameter 'fields' is set
        if ($fields === null || (is_array($fields) && count($fields) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fields when calling getEntitiesList'
            );
        }
        // verify the required parameter 'filter' is set
        if ($filter === null || (is_array($filter) && count($filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter when calling getEntitiesList'
            );
        }
        // verify the required parameter 'resolve_placeholders' is set
        if ($resolve_placeholders === null || (is_array($resolve_placeholders) && count($resolve_placeholders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resolve_placeholders when calling getEntitiesList'
            );
        }
        // verify the required parameter 'sort_by' is set
        if ($sort_by === null || (is_array($sort_by) && count($sort_by) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort_by when calling getEntitiesList'
            );
        }
        // verify the required parameter 'randomization' is set
        if ($randomization === null || (is_array($randomization) && count($randomization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $randomization when calling getEntitiesList'
            );
        }
        // verify the required parameter 'randomization_token' is set
        if ($randomization_token === null || (is_array($randomization_token) && count($randomization_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $randomization_token when calling getEntitiesList'
            );
        }
        // verify the required parameter 'page_token' is set
        if ($page_token === null || (is_array($page_token) && count($page_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_token when calling getEntitiesList'
            );
        }

        $resourcePath = '/entities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($v !== null) {
            $queryParams['v'] = ObjectSerializer::toQueryValue($v);
        }
        // query params
        if ($entity_types !== null) {
            $queryParams['entityTypes'] = ObjectSerializer::toQueryValue($entity_types);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($languages !== null) {
            $queryParams['languages'] = ObjectSerializer::toQueryValue($languages);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($resolve_placeholders !== null) {
            $queryParams['resolvePlaceholders'] = ObjectSerializer::toQueryValue($resolve_placeholders);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by);
        }
        // query params
        if ($randomization !== null) {
            $queryParams['randomization'] = ObjectSerializer::toQueryValue($randomization);
        }
        // query params
        if ($randomization_token !== null) {
            $queryParams['randomizationToken'] = ObjectSerializer::toQueryValue($randomization_token);
        }
        // query params
        if ($page_token !== null) {
            $queryParams['pageToken'] = ObjectSerializer::toQueryValue($page_token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
