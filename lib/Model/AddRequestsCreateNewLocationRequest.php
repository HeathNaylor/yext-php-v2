<?php
/**
 * AddRequestsCreateNewLocationRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * developer.yext.com (FINAL)
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AddRequestsCreateNewLocationRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddRequestsCreateNewLocationRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AddRequests:Create(NewLocation)Request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'new_location_id' => 'string',
        'new_location_account_id' => 'string',
        'new_location_account_name' => 'string',
        'new_account_parent_account_id' => 'string',
        'new_location_data' => '\Swagger\Client\Model\NewLocationData',
        'skus' => 'string[]',
        'agreement_id' => 'int',
        'force_review' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'new_location_id' => null,
        'new_location_account_id' => null,
        'new_location_account_name' => null,
        'new_account_parent_account_id' => null,
        'new_location_data' => null,
        'skus' => null,
        'agreement_id' => 'int32',
        'force_review' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'new_location_id' => 'newLocationId',
        'new_location_account_id' => 'newLocationAccountId',
        'new_location_account_name' => 'newLocationAccountName',
        'new_account_parent_account_id' => 'newAccountParentAccountId',
        'new_location_data' => 'newLocationData',
        'skus' => 'skus',
        'agreement_id' => 'agreementId',
        'force_review' => 'forceReview'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'new_location_id' => 'setNewLocationId',
        'new_location_account_id' => 'setNewLocationAccountId',
        'new_location_account_name' => 'setNewLocationAccountName',
        'new_account_parent_account_id' => 'setNewAccountParentAccountId',
        'new_location_data' => 'setNewLocationData',
        'skus' => 'setSkus',
        'agreement_id' => 'setAgreementId',
        'force_review' => 'setForceReview'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'new_location_id' => 'getNewLocationId',
        'new_location_account_id' => 'getNewLocationAccountId',
        'new_location_account_name' => 'getNewLocationAccountName',
        'new_account_parent_account_id' => 'getNewAccountParentAccountId',
        'new_location_data' => 'getNewLocationData',
        'skus' => 'getSkus',
        'agreement_id' => 'getAgreementId',
        'force_review' => 'getForceReview'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['new_location_id'] = isset($data['new_location_id']) ? $data['new_location_id'] : null;
        $this->container['new_location_account_id'] = isset($data['new_location_account_id']) ? $data['new_location_account_id'] : null;
        $this->container['new_location_account_name'] = isset($data['new_location_account_name']) ? $data['new_location_account_name'] : null;
        $this->container['new_account_parent_account_id'] = isset($data['new_account_parent_account_id']) ? $data['new_account_parent_account_id'] : null;
        $this->container['new_location_data'] = isset($data['new_location_data']) ? $data['new_location_data'] : null;
        $this->container['skus'] = isset($data['skus']) ? $data['skus'] : null;
        $this->container['agreement_id'] = isset($data['agreement_id']) ? $data['agreement_id'] : null;
        $this->container['force_review'] = isset($data['force_review']) ? $data['force_review'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['new_location_id'] === null) {
            $invalidProperties[] = "'new_location_id' can't be null";
        }
        if ($this->container['new_location_account_id'] === null) {
            $invalidProperties[] = "'new_location_account_id' can't be null";
        }
        if ($this->container['new_location_account_name'] === null) {
            $invalidProperties[] = "'new_location_account_name' can't be null";
        }
        if ($this->container['new_account_parent_account_id'] === null) {
            $invalidProperties[] = "'new_account_parent_account_id' can't be null";
        }
        if ($this->container['new_location_data'] === null) {
            $invalidProperties[] = "'new_location_data' can't be null";
        }
        if ($this->container['skus'] === null) {
            $invalidProperties[] = "'skus' can't be null";
        }
        if ($this->container['agreement_id'] === null) {
            $invalidProperties[] = "'agreement_id' can't be null";
        }
        if ($this->container['force_review'] === null) {
            $invalidProperties[] = "'force_review' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets new_location_id
     *
     * @return string
     */
    public function getNewLocationId()
    {
        return $this->container['new_location_id'];
    }

    /**
     * Sets new_location_id
     *
     * @param string $new_location_id new_location_id
     *
     * @return $this
     */
    public function setNewLocationId($new_location_id)
    {
        $this->container['new_location_id'] = $new_location_id;

        return $this;
    }

    /**
     * Gets new_location_account_id
     *
     * @return string
     */
    public function getNewLocationAccountId()
    {
        return $this->container['new_location_account_id'];
    }

    /**
     * Sets new_location_account_id
     *
     * @param string $new_location_account_id new_location_account_id
     *
     * @return $this
     */
    public function setNewLocationAccountId($new_location_account_id)
    {
        $this->container['new_location_account_id'] = $new_location_account_id;

        return $this;
    }

    /**
     * Gets new_location_account_name
     *
     * @return string
     */
    public function getNewLocationAccountName()
    {
        return $this->container['new_location_account_name'];
    }

    /**
     * Sets new_location_account_name
     *
     * @param string $new_location_account_name new_location_account_name
     *
     * @return $this
     */
    public function setNewLocationAccountName($new_location_account_name)
    {
        $this->container['new_location_account_name'] = $new_location_account_name;

        return $this;
    }

    /**
     * Gets new_account_parent_account_id
     *
     * @return string
     */
    public function getNewAccountParentAccountId()
    {
        return $this->container['new_account_parent_account_id'];
    }

    /**
     * Sets new_account_parent_account_id
     *
     * @param string $new_account_parent_account_id new_account_parent_account_id
     *
     * @return $this
     */
    public function setNewAccountParentAccountId($new_account_parent_account_id)
    {
        $this->container['new_account_parent_account_id'] = $new_account_parent_account_id;

        return $this;
    }

    /**
     * Gets new_location_data
     *
     * @return \Swagger\Client\Model\NewLocationData
     */
    public function getNewLocationData()
    {
        return $this->container['new_location_data'];
    }

    /**
     * Sets new_location_data
     *
     * @param \Swagger\Client\Model\NewLocationData $new_location_data new_location_data
     *
     * @return $this
     */
    public function setNewLocationData($new_location_data)
    {
        $this->container['new_location_data'] = $new_location_data;

        return $this;
    }

    /**
     * Gets skus
     *
     * @return string[]
     */
    public function getSkus()
    {
        return $this->container['skus'];
    }

    /**
     * Sets skus
     *
     * @param string[] $skus skus
     *
     * @return $this
     */
    public function setSkus($skus)
    {
        $this->container['skus'] = $skus;

        return $this;
    }

    /**
     * Gets agreement_id
     *
     * @return int
     */
    public function getAgreementId()
    {
        return $this->container['agreement_id'];
    }

    /**
     * Sets agreement_id
     *
     * @param int $agreement_id agreement_id
     *
     * @return $this
     */
    public function setAgreementId($agreement_id)
    {
        $this->container['agreement_id'] = $agreement_id;

        return $this;
    }

    /**
     * Gets force_review
     *
     * @return bool
     */
    public function getForceReview()
    {
        return $this->container['force_review'];
    }

    /**
     * Sets force_review
     *
     * @param bool $force_review force_review
     *
     * @return $this
     */
    public function setForceReview($force_review)
    {
        $this->container['force_review'] = $force_review;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


