<?php
/**
 * Filters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * developer.yext.com (read-only)
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Filters Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Filters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Filters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start_date' => 'string',
        'end_date' => 'string',
        'location_ids' => 'string[]',
        'folder_id' => 'int',
        'countries' => 'string[]',
        'location_labels' => 'string[]',
        'platforms' => 'string[]',
        'google_action_type' => 'string[]',
        'customer_action_type' => 'string[]',
        'google_query_type' => 'string[]',
        'hours' => 'int[]',
        'ratings' => 'int[]',
        'frequent_words' => 'string[]',
        'partners' => 'int[]',
        'review_labels' => 'int[]',
        'page_types' => 'string[]',
        'listings_live_type' => 'string',
        'publisher_suggestion_type' => 'string[]',
        'query_template' => 'string[]',
        'search_engine' => 'string[]',
        'keyword' => 'string[]',
        'competitor' => 'string[]',
        'match_position' => 'string[]',
        'search_result_type' => 'string[]',
        'match_type' => 'string[]',
        'min_search_frequency' => 'int',
        'max_search_frequency' => 'int',
        'search_term' => 'string',
        'search_type' => 'string',
        'foursquare_checkin_type' => 'string',
        'foursquare_checkin_age' => 'string',
        'foursquare_checkin_gender' => 'string',
        'foursquare_checkin_time_of_day' => 'string',
        'instagram_content_type' => 'string',
        'age' => 'string[]',
        'gender' => 'string',
        'facebook_impression_type' => 'string[]',
        'facebook_story_type' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start_date' => null,
        'end_date' => null,
        'location_ids' => null,
        'folder_id' => 'int32',
        'countries' => null,
        'location_labels' => null,
        'platforms' => null,
        'google_action_type' => null,
        'customer_action_type' => null,
        'google_query_type' => null,
        'hours' => 'int32',
        'ratings' => 'int32',
        'frequent_words' => null,
        'partners' => 'int32',
        'review_labels' => 'int32',
        'page_types' => null,
        'listings_live_type' => null,
        'publisher_suggestion_type' => null,
        'query_template' => null,
        'search_engine' => null,
        'keyword' => null,
        'competitor' => null,
        'match_position' => null,
        'search_result_type' => null,
        'match_type' => null,
        'min_search_frequency' => 'int32',
        'max_search_frequency' => 'int32',
        'search_term' => null,
        'search_type' => null,
        'foursquare_checkin_type' => null,
        'foursquare_checkin_age' => null,
        'foursquare_checkin_gender' => null,
        'foursquare_checkin_time_of_day' => null,
        'instagram_content_type' => null,
        'age' => null,
        'gender' => null,
        'facebook_impression_type' => null,
        'facebook_story_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'location_ids' => 'locationIds',
        'folder_id' => 'folderId',
        'countries' => 'countries',
        'location_labels' => 'locationLabels',
        'platforms' => 'platforms',
        'google_action_type' => 'googleActionType',
        'customer_action_type' => 'customerActionType',
        'google_query_type' => 'googleQueryType',
        'hours' => 'hours',
        'ratings' => 'ratings',
        'frequent_words' => 'frequentWords',
        'partners' => 'partners',
        'review_labels' => 'reviewLabels',
        'page_types' => 'pageTypes',
        'listings_live_type' => 'listingsLiveType',
        'publisher_suggestion_type' => 'publisherSuggestionType',
        'query_template' => 'queryTemplate',
        'search_engine' => 'searchEngine',
        'keyword' => 'keyword',
        'competitor' => 'competitor',
        'match_position' => 'matchPosition',
        'search_result_type' => 'searchResultType',
        'match_type' => 'matchType',
        'min_search_frequency' => 'minSearchFrequency',
        'max_search_frequency' => 'maxSearchFrequency',
        'search_term' => 'searchTerm',
        'search_type' => 'searchType',
        'foursquare_checkin_type' => 'foursquareCheckinType',
        'foursquare_checkin_age' => 'foursquareCheckinAge',
        'foursquare_checkin_gender' => 'foursquareCheckinGender',
        'foursquare_checkin_time_of_day' => 'foursquareCheckinTimeOfDay',
        'instagram_content_type' => 'instagramContentType',
        'age' => 'age',
        'gender' => 'gender',
        'facebook_impression_type' => 'facebookImpressionType',
        'facebook_story_type' => 'facebookStoryType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'location_ids' => 'setLocationIds',
        'folder_id' => 'setFolderId',
        'countries' => 'setCountries',
        'location_labels' => 'setLocationLabels',
        'platforms' => 'setPlatforms',
        'google_action_type' => 'setGoogleActionType',
        'customer_action_type' => 'setCustomerActionType',
        'google_query_type' => 'setGoogleQueryType',
        'hours' => 'setHours',
        'ratings' => 'setRatings',
        'frequent_words' => 'setFrequentWords',
        'partners' => 'setPartners',
        'review_labels' => 'setReviewLabels',
        'page_types' => 'setPageTypes',
        'listings_live_type' => 'setListingsLiveType',
        'publisher_suggestion_type' => 'setPublisherSuggestionType',
        'query_template' => 'setQueryTemplate',
        'search_engine' => 'setSearchEngine',
        'keyword' => 'setKeyword',
        'competitor' => 'setCompetitor',
        'match_position' => 'setMatchPosition',
        'search_result_type' => 'setSearchResultType',
        'match_type' => 'setMatchType',
        'min_search_frequency' => 'setMinSearchFrequency',
        'max_search_frequency' => 'setMaxSearchFrequency',
        'search_term' => 'setSearchTerm',
        'search_type' => 'setSearchType',
        'foursquare_checkin_type' => 'setFoursquareCheckinType',
        'foursquare_checkin_age' => 'setFoursquareCheckinAge',
        'foursquare_checkin_gender' => 'setFoursquareCheckinGender',
        'foursquare_checkin_time_of_day' => 'setFoursquareCheckinTimeOfDay',
        'instagram_content_type' => 'setInstagramContentType',
        'age' => 'setAge',
        'gender' => 'setGender',
        'facebook_impression_type' => 'setFacebookImpressionType',
        'facebook_story_type' => 'setFacebookStoryType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'location_ids' => 'getLocationIds',
        'folder_id' => 'getFolderId',
        'countries' => 'getCountries',
        'location_labels' => 'getLocationLabels',
        'platforms' => 'getPlatforms',
        'google_action_type' => 'getGoogleActionType',
        'customer_action_type' => 'getCustomerActionType',
        'google_query_type' => 'getGoogleQueryType',
        'hours' => 'getHours',
        'ratings' => 'getRatings',
        'frequent_words' => 'getFrequentWords',
        'partners' => 'getPartners',
        'review_labels' => 'getReviewLabels',
        'page_types' => 'getPageTypes',
        'listings_live_type' => 'getListingsLiveType',
        'publisher_suggestion_type' => 'getPublisherSuggestionType',
        'query_template' => 'getQueryTemplate',
        'search_engine' => 'getSearchEngine',
        'keyword' => 'getKeyword',
        'competitor' => 'getCompetitor',
        'match_position' => 'getMatchPosition',
        'search_result_type' => 'getSearchResultType',
        'match_type' => 'getMatchType',
        'min_search_frequency' => 'getMinSearchFrequency',
        'max_search_frequency' => 'getMaxSearchFrequency',
        'search_term' => 'getSearchTerm',
        'search_type' => 'getSearchType',
        'foursquare_checkin_type' => 'getFoursquareCheckinType',
        'foursquare_checkin_age' => 'getFoursquareCheckinAge',
        'foursquare_checkin_gender' => 'getFoursquareCheckinGender',
        'foursquare_checkin_time_of_day' => 'getFoursquareCheckinTimeOfDay',
        'instagram_content_type' => 'getInstagramContentType',
        'age' => 'getAge',
        'gender' => 'getGender',
        'facebook_impression_type' => 'getFacebookImpressionType',
        'facebook_story_type' => 'getFacebookStoryType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['location_ids'] = isset($data['location_ids']) ? $data['location_ids'] : null;
        $this->container['folder_id'] = isset($data['folder_id']) ? $data['folder_id'] : null;
        $this->container['countries'] = isset($data['countries']) ? $data['countries'] : null;
        $this->container['location_labels'] = isset($data['location_labels']) ? $data['location_labels'] : null;
        $this->container['platforms'] = isset($data['platforms']) ? $data['platforms'] : null;
        $this->container['google_action_type'] = isset($data['google_action_type']) ? $data['google_action_type'] : null;
        $this->container['customer_action_type'] = isset($data['customer_action_type']) ? $data['customer_action_type'] : null;
        $this->container['google_query_type'] = isset($data['google_query_type']) ? $data['google_query_type'] : null;
        $this->container['hours'] = isset($data['hours']) ? $data['hours'] : null;
        $this->container['ratings'] = isset($data['ratings']) ? $data['ratings'] : null;
        $this->container['frequent_words'] = isset($data['frequent_words']) ? $data['frequent_words'] : null;
        $this->container['partners'] = isset($data['partners']) ? $data['partners'] : null;
        $this->container['review_labels'] = isset($data['review_labels']) ? $data['review_labels'] : null;
        $this->container['page_types'] = isset($data['page_types']) ? $data['page_types'] : null;
        $this->container['listings_live_type'] = isset($data['listings_live_type']) ? $data['listings_live_type'] : null;
        $this->container['publisher_suggestion_type'] = isset($data['publisher_suggestion_type']) ? $data['publisher_suggestion_type'] : null;
        $this->container['query_template'] = isset($data['query_template']) ? $data['query_template'] : null;
        $this->container['search_engine'] = isset($data['search_engine']) ? $data['search_engine'] : null;
        $this->container['keyword'] = isset($data['keyword']) ? $data['keyword'] : null;
        $this->container['competitor'] = isset($data['competitor']) ? $data['competitor'] : null;
        $this->container['match_position'] = isset($data['match_position']) ? $data['match_position'] : null;
        $this->container['search_result_type'] = isset($data['search_result_type']) ? $data['search_result_type'] : null;
        $this->container['match_type'] = isset($data['match_type']) ? $data['match_type'] : null;
        $this->container['min_search_frequency'] = isset($data['min_search_frequency']) ? $data['min_search_frequency'] : null;
        $this->container['max_search_frequency'] = isset($data['max_search_frequency']) ? $data['max_search_frequency'] : null;
        $this->container['search_term'] = isset($data['search_term']) ? $data['search_term'] : null;
        $this->container['search_type'] = isset($data['search_type']) ? $data['search_type'] : null;
        $this->container['foursquare_checkin_type'] = isset($data['foursquare_checkin_type']) ? $data['foursquare_checkin_type'] : null;
        $this->container['foursquare_checkin_age'] = isset($data['foursquare_checkin_age']) ? $data['foursquare_checkin_age'] : null;
        $this->container['foursquare_checkin_gender'] = isset($data['foursquare_checkin_gender']) ? $data['foursquare_checkin_gender'] : null;
        $this->container['foursquare_checkin_time_of_day'] = isset($data['foursquare_checkin_time_of_day']) ? $data['foursquare_checkin_time_of_day'] : null;
        $this->container['instagram_content_type'] = isset($data['instagram_content_type']) ? $data['instagram_content_type'] : null;
        $this->container['age'] = isset($data['age']) ? $data['age'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['facebook_impression_type'] = isset($data['facebook_impression_type']) ? $data['facebook_impression_type'] : null;
        $this->container['facebook_story_type'] = isset($data['facebook_story_type']) ? $data['facebook_story_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        if ($this->container['location_ids'] === null) {
            $invalidProperties[] = "'location_ids' can't be null";
        }
        if ($this->container['folder_id'] === null) {
            $invalidProperties[] = "'folder_id' can't be null";
        }
        if ($this->container['countries'] === null) {
            $invalidProperties[] = "'countries' can't be null";
        }
        if ($this->container['location_labels'] === null) {
            $invalidProperties[] = "'location_labels' can't be null";
        }
        if ($this->container['platforms'] === null) {
            $invalidProperties[] = "'platforms' can't be null";
        }
        if ($this->container['google_action_type'] === null) {
            $invalidProperties[] = "'google_action_type' can't be null";
        }
        if ($this->container['customer_action_type'] === null) {
            $invalidProperties[] = "'customer_action_type' can't be null";
        }
        if ($this->container['google_query_type'] === null) {
            $invalidProperties[] = "'google_query_type' can't be null";
        }
        if ($this->container['hours'] === null) {
            $invalidProperties[] = "'hours' can't be null";
        }
        if ($this->container['ratings'] === null) {
            $invalidProperties[] = "'ratings' can't be null";
        }
        if ($this->container['frequent_words'] === null) {
            $invalidProperties[] = "'frequent_words' can't be null";
        }
        if ($this->container['partners'] === null) {
            $invalidProperties[] = "'partners' can't be null";
        }
        if ($this->container['review_labels'] === null) {
            $invalidProperties[] = "'review_labels' can't be null";
        }
        if ($this->container['page_types'] === null) {
            $invalidProperties[] = "'page_types' can't be null";
        }
        if ($this->container['listings_live_type'] === null) {
            $invalidProperties[] = "'listings_live_type' can't be null";
        }
        if ($this->container['publisher_suggestion_type'] === null) {
            $invalidProperties[] = "'publisher_suggestion_type' can't be null";
        }
        if ($this->container['query_template'] === null) {
            $invalidProperties[] = "'query_template' can't be null";
        }
        if ($this->container['search_engine'] === null) {
            $invalidProperties[] = "'search_engine' can't be null";
        }
        if ($this->container['keyword'] === null) {
            $invalidProperties[] = "'keyword' can't be null";
        }
        if ($this->container['competitor'] === null) {
            $invalidProperties[] = "'competitor' can't be null";
        }
        if ($this->container['match_position'] === null) {
            $invalidProperties[] = "'match_position' can't be null";
        }
        if ($this->container['search_result_type'] === null) {
            $invalidProperties[] = "'search_result_type' can't be null";
        }
        if ($this->container['match_type'] === null) {
            $invalidProperties[] = "'match_type' can't be null";
        }
        if ($this->container['min_search_frequency'] === null) {
            $invalidProperties[] = "'min_search_frequency' can't be null";
        }
        if ($this->container['max_search_frequency'] === null) {
            $invalidProperties[] = "'max_search_frequency' can't be null";
        }
        if ($this->container['search_term'] === null) {
            $invalidProperties[] = "'search_term' can't be null";
        }
        if ($this->container['search_type'] === null) {
            $invalidProperties[] = "'search_type' can't be null";
        }
        if ($this->container['foursquare_checkin_type'] === null) {
            $invalidProperties[] = "'foursquare_checkin_type' can't be null";
        }
        if ($this->container['foursquare_checkin_age'] === null) {
            $invalidProperties[] = "'foursquare_checkin_age' can't be null";
        }
        if ($this->container['foursquare_checkin_gender'] === null) {
            $invalidProperties[] = "'foursquare_checkin_gender' can't be null";
        }
        if ($this->container['foursquare_checkin_time_of_day'] === null) {
            $invalidProperties[] = "'foursquare_checkin_time_of_day' can't be null";
        }
        if ($this->container['instagram_content_type'] === null) {
            $invalidProperties[] = "'instagram_content_type' can't be null";
        }
        if ($this->container['age'] === null) {
            $invalidProperties[] = "'age' can't be null";
        }
        if ($this->container['gender'] === null) {
            $invalidProperties[] = "'gender' can't be null";
        }
        if ($this->container['facebook_impression_type'] === null) {
            $invalidProperties[] = "'facebook_impression_type' can't be null";
        }
        if ($this->container['facebook_story_type'] === null) {
            $invalidProperties[] = "'facebook_story_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets location_ids
     *
     * @return string[]
     */
    public function getLocationIds()
    {
        return $this->container['location_ids'];
    }

    /**
     * Sets location_ids
     *
     * @param string[] $location_ids location_ids
     *
     * @return $this
     */
    public function setLocationIds($location_ids)
    {
        $this->container['location_ids'] = $location_ids;

        return $this;
    }

    /**
     * Gets folder_id
     *
     * @return int
     */
    public function getFolderId()
    {
        return $this->container['folder_id'];
    }

    /**
     * Sets folder_id
     *
     * @param int $folder_id folder_id
     *
     * @return $this
     */
    public function setFolderId($folder_id)
    {
        $this->container['folder_id'] = $folder_id;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return string[]
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param string[] $countries countries
     *
     * @return $this
     */
    public function setCountries($countries)
    {
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets location_labels
     *
     * @return string[]
     */
    public function getLocationLabels()
    {
        return $this->container['location_labels'];
    }

    /**
     * Sets location_labels
     *
     * @param string[] $location_labels location_labels
     *
     * @return $this
     */
    public function setLocationLabels($location_labels)
    {
        $this->container['location_labels'] = $location_labels;

        return $this;
    }

    /**
     * Gets platforms
     *
     * @return string[]
     */
    public function getPlatforms()
    {
        return $this->container['platforms'];
    }

    /**
     * Sets platforms
     *
     * @param string[] $platforms platforms
     *
     * @return $this
     */
    public function setPlatforms($platforms)
    {
        $this->container['platforms'] = $platforms;

        return $this;
    }

    /**
     * Gets google_action_type
     *
     * @return string[]
     */
    public function getGoogleActionType()
    {
        return $this->container['google_action_type'];
    }

    /**
     * Sets google_action_type
     *
     * @param string[] $google_action_type google_action_type
     *
     * @return $this
     */
    public function setGoogleActionType($google_action_type)
    {
        $this->container['google_action_type'] = $google_action_type;

        return $this;
    }

    /**
     * Gets customer_action_type
     *
     * @return string[]
     */
    public function getCustomerActionType()
    {
        return $this->container['customer_action_type'];
    }

    /**
     * Sets customer_action_type
     *
     * @param string[] $customer_action_type customer_action_type
     *
     * @return $this
     */
    public function setCustomerActionType($customer_action_type)
    {
        $this->container['customer_action_type'] = $customer_action_type;

        return $this;
    }

    /**
     * Gets google_query_type
     *
     * @return string[]
     */
    public function getGoogleQueryType()
    {
        return $this->container['google_query_type'];
    }

    /**
     * Sets google_query_type
     *
     * @param string[] $google_query_type google_query_type
     *
     * @return $this
     */
    public function setGoogleQueryType($google_query_type)
    {
        $this->container['google_query_type'] = $google_query_type;

        return $this;
    }

    /**
     * Gets hours
     *
     * @return int[]
     */
    public function getHours()
    {
        return $this->container['hours'];
    }

    /**
     * Sets hours
     *
     * @param int[] $hours hours
     *
     * @return $this
     */
    public function setHours($hours)
    {
        $this->container['hours'] = $hours;

        return $this;
    }

    /**
     * Gets ratings
     *
     * @return int[]
     */
    public function getRatings()
    {
        return $this->container['ratings'];
    }

    /**
     * Sets ratings
     *
     * @param int[] $ratings ratings
     *
     * @return $this
     */
    public function setRatings($ratings)
    {
        $this->container['ratings'] = $ratings;

        return $this;
    }

    /**
     * Gets frequent_words
     *
     * @return string[]
     */
    public function getFrequentWords()
    {
        return $this->container['frequent_words'];
    }

    /**
     * Sets frequent_words
     *
     * @param string[] $frequent_words frequent_words
     *
     * @return $this
     */
    public function setFrequentWords($frequent_words)
    {
        $this->container['frequent_words'] = $frequent_words;

        return $this;
    }

    /**
     * Gets partners
     *
     * @return int[]
     */
    public function getPartners()
    {
        return $this->container['partners'];
    }

    /**
     * Sets partners
     *
     * @param int[] $partners partners
     *
     * @return $this
     */
    public function setPartners($partners)
    {
        $this->container['partners'] = $partners;

        return $this;
    }

    /**
     * Gets review_labels
     *
     * @return int[]
     */
    public function getReviewLabels()
    {
        return $this->container['review_labels'];
    }

    /**
     * Sets review_labels
     *
     * @param int[] $review_labels review_labels
     *
     * @return $this
     */
    public function setReviewLabels($review_labels)
    {
        $this->container['review_labels'] = $review_labels;

        return $this;
    }

    /**
     * Gets page_types
     *
     * @return string[]
     */
    public function getPageTypes()
    {
        return $this->container['page_types'];
    }

    /**
     * Sets page_types
     *
     * @param string[] $page_types page_types
     *
     * @return $this
     */
    public function setPageTypes($page_types)
    {
        $this->container['page_types'] = $page_types;

        return $this;
    }

    /**
     * Gets listings_live_type
     *
     * @return string
     */
    public function getListingsLiveType()
    {
        return $this->container['listings_live_type'];
    }

    /**
     * Sets listings_live_type
     *
     * @param string $listings_live_type listings_live_type
     *
     * @return $this
     */
    public function setListingsLiveType($listings_live_type)
    {
        $this->container['listings_live_type'] = $listings_live_type;

        return $this;
    }

    /**
     * Gets publisher_suggestion_type
     *
     * @return string[]
     */
    public function getPublisherSuggestionType()
    {
        return $this->container['publisher_suggestion_type'];
    }

    /**
     * Sets publisher_suggestion_type
     *
     * @param string[] $publisher_suggestion_type publisher_suggestion_type
     *
     * @return $this
     */
    public function setPublisherSuggestionType($publisher_suggestion_type)
    {
        $this->container['publisher_suggestion_type'] = $publisher_suggestion_type;

        return $this;
    }

    /**
     * Gets query_template
     *
     * @return string[]
     */
    public function getQueryTemplate()
    {
        return $this->container['query_template'];
    }

    /**
     * Sets query_template
     *
     * @param string[] $query_template query_template
     *
     * @return $this
     */
    public function setQueryTemplate($query_template)
    {
        $this->container['query_template'] = $query_template;

        return $this;
    }

    /**
     * Gets search_engine
     *
     * @return string[]
     */
    public function getSearchEngine()
    {
        return $this->container['search_engine'];
    }

    /**
     * Sets search_engine
     *
     * @param string[] $search_engine search_engine
     *
     * @return $this
     */
    public function setSearchEngine($search_engine)
    {
        $this->container['search_engine'] = $search_engine;

        return $this;
    }

    /**
     * Gets keyword
     *
     * @return string[]
     */
    public function getKeyword()
    {
        return $this->container['keyword'];
    }

    /**
     * Sets keyword
     *
     * @param string[] $keyword keyword
     *
     * @return $this
     */
    public function setKeyword($keyword)
    {
        $this->container['keyword'] = $keyword;

        return $this;
    }

    /**
     * Gets competitor
     *
     * @return string[]
     */
    public function getCompetitor()
    {
        return $this->container['competitor'];
    }

    /**
     * Sets competitor
     *
     * @param string[] $competitor competitor
     *
     * @return $this
     */
    public function setCompetitor($competitor)
    {
        $this->container['competitor'] = $competitor;

        return $this;
    }

    /**
     * Gets match_position
     *
     * @return string[]
     */
    public function getMatchPosition()
    {
        return $this->container['match_position'];
    }

    /**
     * Sets match_position
     *
     * @param string[] $match_position match_position
     *
     * @return $this
     */
    public function setMatchPosition($match_position)
    {
        $this->container['match_position'] = $match_position;

        return $this;
    }

    /**
     * Gets search_result_type
     *
     * @return string[]
     */
    public function getSearchResultType()
    {
        return $this->container['search_result_type'];
    }

    /**
     * Sets search_result_type
     *
     * @param string[] $search_result_type search_result_type
     *
     * @return $this
     */
    public function setSearchResultType($search_result_type)
    {
        $this->container['search_result_type'] = $search_result_type;

        return $this;
    }

    /**
     * Gets match_type
     *
     * @return string[]
     */
    public function getMatchType()
    {
        return $this->container['match_type'];
    }

    /**
     * Sets match_type
     *
     * @param string[] $match_type match_type
     *
     * @return $this
     */
    public function setMatchType($match_type)
    {
        $this->container['match_type'] = $match_type;

        return $this;
    }

    /**
     * Gets min_search_frequency
     *
     * @return int
     */
    public function getMinSearchFrequency()
    {
        return $this->container['min_search_frequency'];
    }

    /**
     * Sets min_search_frequency
     *
     * @param int $min_search_frequency min_search_frequency
     *
     * @return $this
     */
    public function setMinSearchFrequency($min_search_frequency)
    {
        $this->container['min_search_frequency'] = $min_search_frequency;

        return $this;
    }

    /**
     * Gets max_search_frequency
     *
     * @return int
     */
    public function getMaxSearchFrequency()
    {
        return $this->container['max_search_frequency'];
    }

    /**
     * Sets max_search_frequency
     *
     * @param int $max_search_frequency max_search_frequency
     *
     * @return $this
     */
    public function setMaxSearchFrequency($max_search_frequency)
    {
        $this->container['max_search_frequency'] = $max_search_frequency;

        return $this;
    }

    /**
     * Gets search_term
     *
     * @return string
     */
    public function getSearchTerm()
    {
        return $this->container['search_term'];
    }

    /**
     * Sets search_term
     *
     * @param string $search_term search_term
     *
     * @return $this
     */
    public function setSearchTerm($search_term)
    {
        $this->container['search_term'] = $search_term;

        return $this;
    }

    /**
     * Gets search_type
     *
     * @return string
     */
    public function getSearchType()
    {
        return $this->container['search_type'];
    }

    /**
     * Sets search_type
     *
     * @param string $search_type search_type
     *
     * @return $this
     */
    public function setSearchType($search_type)
    {
        $this->container['search_type'] = $search_type;

        return $this;
    }

    /**
     * Gets foursquare_checkin_type
     *
     * @return string
     */
    public function getFoursquareCheckinType()
    {
        return $this->container['foursquare_checkin_type'];
    }

    /**
     * Sets foursquare_checkin_type
     *
     * @param string $foursquare_checkin_type foursquare_checkin_type
     *
     * @return $this
     */
    public function setFoursquareCheckinType($foursquare_checkin_type)
    {
        $this->container['foursquare_checkin_type'] = $foursquare_checkin_type;

        return $this;
    }

    /**
     * Gets foursquare_checkin_age
     *
     * @return string
     */
    public function getFoursquareCheckinAge()
    {
        return $this->container['foursquare_checkin_age'];
    }

    /**
     * Sets foursquare_checkin_age
     *
     * @param string $foursquare_checkin_age foursquare_checkin_age
     *
     * @return $this
     */
    public function setFoursquareCheckinAge($foursquare_checkin_age)
    {
        $this->container['foursquare_checkin_age'] = $foursquare_checkin_age;

        return $this;
    }

    /**
     * Gets foursquare_checkin_gender
     *
     * @return string
     */
    public function getFoursquareCheckinGender()
    {
        return $this->container['foursquare_checkin_gender'];
    }

    /**
     * Sets foursquare_checkin_gender
     *
     * @param string $foursquare_checkin_gender foursquare_checkin_gender
     *
     * @return $this
     */
    public function setFoursquareCheckinGender($foursquare_checkin_gender)
    {
        $this->container['foursquare_checkin_gender'] = $foursquare_checkin_gender;

        return $this;
    }

    /**
     * Gets foursquare_checkin_time_of_day
     *
     * @return string
     */
    public function getFoursquareCheckinTimeOfDay()
    {
        return $this->container['foursquare_checkin_time_of_day'];
    }

    /**
     * Sets foursquare_checkin_time_of_day
     *
     * @param string $foursquare_checkin_time_of_day foursquare_checkin_time_of_day
     *
     * @return $this
     */
    public function setFoursquareCheckinTimeOfDay($foursquare_checkin_time_of_day)
    {
        $this->container['foursquare_checkin_time_of_day'] = $foursquare_checkin_time_of_day;

        return $this;
    }

    /**
     * Gets instagram_content_type
     *
     * @return string
     */
    public function getInstagramContentType()
    {
        return $this->container['instagram_content_type'];
    }

    /**
     * Sets instagram_content_type
     *
     * @param string $instagram_content_type instagram_content_type
     *
     * @return $this
     */
    public function setInstagramContentType($instagram_content_type)
    {
        $this->container['instagram_content_type'] = $instagram_content_type;

        return $this;
    }

    /**
     * Gets age
     *
     * @return string[]
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param string[] $age age
     *
     * @return $this
     */
    public function setAge($age)
    {
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets facebook_impression_type
     *
     * @return string[]
     */
    public function getFacebookImpressionType()
    {
        return $this->container['facebook_impression_type'];
    }

    /**
     * Sets facebook_impression_type
     *
     * @param string[] $facebook_impression_type facebook_impression_type
     *
     * @return $this
     */
    public function setFacebookImpressionType($facebook_impression_type)
    {
        $this->container['facebook_impression_type'] = $facebook_impression_type;

        return $this;
    }

    /**
     * Gets facebook_story_type
     *
     * @return string[]
     */
    public function getFacebookStoryType()
    {
        return $this->container['facebook_story_type'];
    }

    /**
     * Sets facebook_story_type
     *
     * @param string[] $facebook_story_type facebook_story_type
     *
     * @return $this
     */
    public function setFacebookStoryType($facebook_story_type)
    {
        $this->container['facebook_story_type'] = $facebook_story_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


