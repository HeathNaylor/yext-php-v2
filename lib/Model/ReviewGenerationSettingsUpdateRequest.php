<?php
/**
 * ReviewGenerationSettingsUpdateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * developer.yext.com (FINAL)
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReviewGenerationSettingsUpdateRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReviewGenerationSettingsUpdateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReviewGenerationSettings:UpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'site_distribution' => '\Swagger\Client\Model\SiteDistribution',
        'algorithm_configuration' => 'string[]',
        'balancing_optimization' => 'string',
        'max_emails_per_day' => 'int',
        'max_texts_per_month' => 'int',
        'max_texts_per_day' => 'int',
        'max_contact_frequency' => 'int',
        'review_quarantine_days' => 'int',
        'privacy_policy_override' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'site_distribution' => null,
        'algorithm_configuration' => null,
        'balancing_optimization' => null,
        'max_emails_per_day' => 'int32',
        'max_texts_per_month' => 'int32',
        'max_texts_per_day' => 'int32',
        'max_contact_frequency' => 'int32',
        'review_quarantine_days' => 'int32',
        'privacy_policy_override' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'site_distribution' => 'siteDistribution',
        'algorithm_configuration' => 'algorithmConfiguration',
        'balancing_optimization' => 'balancingOptimization',
        'max_emails_per_day' => 'maxEmailsPerDay',
        'max_texts_per_month' => 'maxTextsPerMonth',
        'max_texts_per_day' => 'maxTextsPerDay',
        'max_contact_frequency' => 'maxContactFrequency',
        'review_quarantine_days' => 'reviewQuarantineDays',
        'privacy_policy_override' => 'privacyPolicyOverride'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'site_distribution' => 'setSiteDistribution',
        'algorithm_configuration' => 'setAlgorithmConfiguration',
        'balancing_optimization' => 'setBalancingOptimization',
        'max_emails_per_day' => 'setMaxEmailsPerDay',
        'max_texts_per_month' => 'setMaxTextsPerMonth',
        'max_texts_per_day' => 'setMaxTextsPerDay',
        'max_contact_frequency' => 'setMaxContactFrequency',
        'review_quarantine_days' => 'setReviewQuarantineDays',
        'privacy_policy_override' => 'setPrivacyPolicyOverride'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'site_distribution' => 'getSiteDistribution',
        'algorithm_configuration' => 'getAlgorithmConfiguration',
        'balancing_optimization' => 'getBalancingOptimization',
        'max_emails_per_day' => 'getMaxEmailsPerDay',
        'max_texts_per_month' => 'getMaxTextsPerMonth',
        'max_texts_per_day' => 'getMaxTextsPerDay',
        'max_contact_frequency' => 'getMaxContactFrequency',
        'review_quarantine_days' => 'getReviewQuarantineDays',
        'privacy_policy_override' => 'getPrivacyPolicyOverride'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['site_distribution'] = isset($data['site_distribution']) ? $data['site_distribution'] : null;
        $this->container['algorithm_configuration'] = isset($data['algorithm_configuration']) ? $data['algorithm_configuration'] : null;
        $this->container['balancing_optimization'] = isset($data['balancing_optimization']) ? $data['balancing_optimization'] : null;
        $this->container['max_emails_per_day'] = isset($data['max_emails_per_day']) ? $data['max_emails_per_day'] : null;
        $this->container['max_texts_per_month'] = isset($data['max_texts_per_month']) ? $data['max_texts_per_month'] : null;
        $this->container['max_texts_per_day'] = isset($data['max_texts_per_day']) ? $data['max_texts_per_day'] : null;
        $this->container['max_contact_frequency'] = isset($data['max_contact_frequency']) ? $data['max_contact_frequency'] : null;
        $this->container['review_quarantine_days'] = isset($data['review_quarantine_days']) ? $data['review_quarantine_days'] : null;
        $this->container['privacy_policy_override'] = isset($data['privacy_policy_override']) ? $data['privacy_policy_override'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['site_distribution'] === null) {
            $invalidProperties[] = "'site_distribution' can't be null";
        }
        if ($this->container['algorithm_configuration'] === null) {
            $invalidProperties[] = "'algorithm_configuration' can't be null";
        }
        if ($this->container['balancing_optimization'] === null) {
            $invalidProperties[] = "'balancing_optimization' can't be null";
        }
        if ($this->container['max_emails_per_day'] === null) {
            $invalidProperties[] = "'max_emails_per_day' can't be null";
        }
        if ($this->container['max_texts_per_month'] === null) {
            $invalidProperties[] = "'max_texts_per_month' can't be null";
        }
        if ($this->container['max_texts_per_day'] === null) {
            $invalidProperties[] = "'max_texts_per_day' can't be null";
        }
        if ($this->container['max_contact_frequency'] === null) {
            $invalidProperties[] = "'max_contact_frequency' can't be null";
        }
        if ($this->container['review_quarantine_days'] === null) {
            $invalidProperties[] = "'review_quarantine_days' can't be null";
        }
        if ($this->container['privacy_policy_override'] === null) {
            $invalidProperties[] = "'privacy_policy_override' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets site_distribution
     *
     * @return \Swagger\Client\Model\SiteDistribution
     */
    public function getSiteDistribution()
    {
        return $this->container['site_distribution'];
    }

    /**
     * Sets site_distribution
     *
     * @param \Swagger\Client\Model\SiteDistribution $site_distribution site_distribution
     *
     * @return $this
     */
    public function setSiteDistribution($site_distribution)
    {
        $this->container['site_distribution'] = $site_distribution;

        return $this;
    }

    /**
     * Gets algorithm_configuration
     *
     * @return string[]
     */
    public function getAlgorithmConfiguration()
    {
        return $this->container['algorithm_configuration'];
    }

    /**
     * Sets algorithm_configuration
     *
     * @param string[] $algorithm_configuration algorithm_configuration
     *
     * @return $this
     */
    public function setAlgorithmConfiguration($algorithm_configuration)
    {
        $this->container['algorithm_configuration'] = $algorithm_configuration;

        return $this;
    }

    /**
     * Gets balancing_optimization
     *
     * @return string
     */
    public function getBalancingOptimization()
    {
        return $this->container['balancing_optimization'];
    }

    /**
     * Sets balancing_optimization
     *
     * @param string $balancing_optimization balancing_optimization
     *
     * @return $this
     */
    public function setBalancingOptimization($balancing_optimization)
    {
        $this->container['balancing_optimization'] = $balancing_optimization;

        return $this;
    }

    /**
     * Gets max_emails_per_day
     *
     * @return int
     */
    public function getMaxEmailsPerDay()
    {
        return $this->container['max_emails_per_day'];
    }

    /**
     * Sets max_emails_per_day
     *
     * @param int $max_emails_per_day max_emails_per_day
     *
     * @return $this
     */
    public function setMaxEmailsPerDay($max_emails_per_day)
    {
        $this->container['max_emails_per_day'] = $max_emails_per_day;

        return $this;
    }

    /**
     * Gets max_texts_per_month
     *
     * @return int
     */
    public function getMaxTextsPerMonth()
    {
        return $this->container['max_texts_per_month'];
    }

    /**
     * Sets max_texts_per_month
     *
     * @param int $max_texts_per_month max_texts_per_month
     *
     * @return $this
     */
    public function setMaxTextsPerMonth($max_texts_per_month)
    {
        $this->container['max_texts_per_month'] = $max_texts_per_month;

        return $this;
    }

    /**
     * Gets max_texts_per_day
     *
     * @return int
     */
    public function getMaxTextsPerDay()
    {
        return $this->container['max_texts_per_day'];
    }

    /**
     * Sets max_texts_per_day
     *
     * @param int $max_texts_per_day max_texts_per_day
     *
     * @return $this
     */
    public function setMaxTextsPerDay($max_texts_per_day)
    {
        $this->container['max_texts_per_day'] = $max_texts_per_day;

        return $this;
    }

    /**
     * Gets max_contact_frequency
     *
     * @return int
     */
    public function getMaxContactFrequency()
    {
        return $this->container['max_contact_frequency'];
    }

    /**
     * Sets max_contact_frequency
     *
     * @param int $max_contact_frequency max_contact_frequency
     *
     * @return $this
     */
    public function setMaxContactFrequency($max_contact_frequency)
    {
        $this->container['max_contact_frequency'] = $max_contact_frequency;

        return $this;
    }

    /**
     * Gets review_quarantine_days
     *
     * @return int
     */
    public function getReviewQuarantineDays()
    {
        return $this->container['review_quarantine_days'];
    }

    /**
     * Sets review_quarantine_days
     *
     * @param int $review_quarantine_days review_quarantine_days
     *
     * @return $this
     */
    public function setReviewQuarantineDays($review_quarantine_days)
    {
        $this->container['review_quarantine_days'] = $review_quarantine_days;

        return $this;
    }

    /**
     * Gets privacy_policy_override
     *
     * @return string
     */
    public function getPrivacyPolicyOverride()
    {
        return $this->container['privacy_policy_override'];
    }

    /**
     * Sets privacy_policy_override
     *
     * @param string $privacy_policy_override privacy_policy_override
     *
     * @return $this
     */
    public function setPrivacyPolicyOverride($privacy_policy_override)
    {
        $this->container['privacy_policy_override'] = $privacy_policy_override;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


