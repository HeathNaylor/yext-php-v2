<?php
/**
 * Validation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * developer.yext.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Validation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Validation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Validation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'min_char_length' => 'int',
        'max_char_length' => 'int',
        'min_item_count' => 'int',
        'max_item_count' => 'int',
        'min_value' => 'int',
        'max_value' => 'int',
        'min_date' => 'string',
        'max_date' => 'string',
        'aspect_ratio' => 'string',
        'min_width' => 'int',
        'min_height' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'min_char_length' => 'int32',
        'max_char_length' => 'int32',
        'min_item_count' => 'int32',
        'max_item_count' => 'int32',
        'min_value' => 'int32',
        'max_value' => 'int32',
        'min_date' => null,
        'max_date' => null,
        'aspect_ratio' => null,
        'min_width' => 'int32',
        'min_height' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'min_char_length' => 'minCharLength',
        'max_char_length' => 'maxCharLength',
        'min_item_count' => 'minItemCount',
        'max_item_count' => 'maxItemCount',
        'min_value' => 'minValue',
        'max_value' => 'maxValue',
        'min_date' => 'minDate',
        'max_date' => 'maxDate',
        'aspect_ratio' => 'aspectRatio',
        'min_width' => 'minWidth',
        'min_height' => 'minHeight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'min_char_length' => 'setMinCharLength',
        'max_char_length' => 'setMaxCharLength',
        'min_item_count' => 'setMinItemCount',
        'max_item_count' => 'setMaxItemCount',
        'min_value' => 'setMinValue',
        'max_value' => 'setMaxValue',
        'min_date' => 'setMinDate',
        'max_date' => 'setMaxDate',
        'aspect_ratio' => 'setAspectRatio',
        'min_width' => 'setMinWidth',
        'min_height' => 'setMinHeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'min_char_length' => 'getMinCharLength',
        'max_char_length' => 'getMaxCharLength',
        'min_item_count' => 'getMinItemCount',
        'max_item_count' => 'getMaxItemCount',
        'min_value' => 'getMinValue',
        'max_value' => 'getMaxValue',
        'min_date' => 'getMinDate',
        'max_date' => 'getMaxDate',
        'aspect_ratio' => 'getAspectRatio',
        'min_width' => 'getMinWidth',
        'min_height' => 'getMinHeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['min_char_length'] = isset($data['min_char_length']) ? $data['min_char_length'] : null;
        $this->container['max_char_length'] = isset($data['max_char_length']) ? $data['max_char_length'] : null;
        $this->container['min_item_count'] = isset($data['min_item_count']) ? $data['min_item_count'] : null;
        $this->container['max_item_count'] = isset($data['max_item_count']) ? $data['max_item_count'] : null;
        $this->container['min_value'] = isset($data['min_value']) ? $data['min_value'] : null;
        $this->container['max_value'] = isset($data['max_value']) ? $data['max_value'] : null;
        $this->container['min_date'] = isset($data['min_date']) ? $data['min_date'] : null;
        $this->container['max_date'] = isset($data['max_date']) ? $data['max_date'] : null;
        $this->container['aspect_ratio'] = isset($data['aspect_ratio']) ? $data['aspect_ratio'] : null;
        $this->container['min_width'] = isset($data['min_width']) ? $data['min_width'] : null;
        $this->container['min_height'] = isset($data['min_height']) ? $data['min_height'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['min_char_length'] === null) {
            $invalidProperties[] = "'min_char_length' can't be null";
        }
        if ($this->container['max_char_length'] === null) {
            $invalidProperties[] = "'max_char_length' can't be null";
        }
        if ($this->container['min_item_count'] === null) {
            $invalidProperties[] = "'min_item_count' can't be null";
        }
        if ($this->container['max_item_count'] === null) {
            $invalidProperties[] = "'max_item_count' can't be null";
        }
        if ($this->container['min_value'] === null) {
            $invalidProperties[] = "'min_value' can't be null";
        }
        if ($this->container['max_value'] === null) {
            $invalidProperties[] = "'max_value' can't be null";
        }
        if ($this->container['min_date'] === null) {
            $invalidProperties[] = "'min_date' can't be null";
        }
        if ($this->container['max_date'] === null) {
            $invalidProperties[] = "'max_date' can't be null";
        }
        if ($this->container['aspect_ratio'] === null) {
            $invalidProperties[] = "'aspect_ratio' can't be null";
        }
        if ($this->container['min_width'] === null) {
            $invalidProperties[] = "'min_width' can't be null";
        }
        if ($this->container['min_height'] === null) {
            $invalidProperties[] = "'min_height' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets min_char_length
     *
     * @return int
     */
    public function getMinCharLength()
    {
        return $this->container['min_char_length'];
    }

    /**
     * Sets min_char_length
     *
     * @param int $min_char_length min_char_length
     *
     * @return $this
     */
    public function setMinCharLength($min_char_length)
    {
        $this->container['min_char_length'] = $min_char_length;

        return $this;
    }

    /**
     * Gets max_char_length
     *
     * @return int
     */
    public function getMaxCharLength()
    {
        return $this->container['max_char_length'];
    }

    /**
     * Sets max_char_length
     *
     * @param int $max_char_length max_char_length
     *
     * @return $this
     */
    public function setMaxCharLength($max_char_length)
    {
        $this->container['max_char_length'] = $max_char_length;

        return $this;
    }

    /**
     * Gets min_item_count
     *
     * @return int
     */
    public function getMinItemCount()
    {
        return $this->container['min_item_count'];
    }

    /**
     * Sets min_item_count
     *
     * @param int $min_item_count min_item_count
     *
     * @return $this
     */
    public function setMinItemCount($min_item_count)
    {
        $this->container['min_item_count'] = $min_item_count;

        return $this;
    }

    /**
     * Gets max_item_count
     *
     * @return int
     */
    public function getMaxItemCount()
    {
        return $this->container['max_item_count'];
    }

    /**
     * Sets max_item_count
     *
     * @param int $max_item_count max_item_count
     *
     * @return $this
     */
    public function setMaxItemCount($max_item_count)
    {
        $this->container['max_item_count'] = $max_item_count;

        return $this;
    }

    /**
     * Gets min_value
     *
     * @return int
     */
    public function getMinValue()
    {
        return $this->container['min_value'];
    }

    /**
     * Sets min_value
     *
     * @param int $min_value min_value
     *
     * @return $this
     */
    public function setMinValue($min_value)
    {
        $this->container['min_value'] = $min_value;

        return $this;
    }

    /**
     * Gets max_value
     *
     * @return int
     */
    public function getMaxValue()
    {
        return $this->container['max_value'];
    }

    /**
     * Sets max_value
     *
     * @param int $max_value max_value
     *
     * @return $this
     */
    public function setMaxValue($max_value)
    {
        $this->container['max_value'] = $max_value;

        return $this;
    }

    /**
     * Gets min_date
     *
     * @return string
     */
    public function getMinDate()
    {
        return $this->container['min_date'];
    }

    /**
     * Sets min_date
     *
     * @param string $min_date min_date
     *
     * @return $this
     */
    public function setMinDate($min_date)
    {
        $this->container['min_date'] = $min_date;

        return $this;
    }

    /**
     * Gets max_date
     *
     * @return string
     */
    public function getMaxDate()
    {
        return $this->container['max_date'];
    }

    /**
     * Sets max_date
     *
     * @param string $max_date max_date
     *
     * @return $this
     */
    public function setMaxDate($max_date)
    {
        $this->container['max_date'] = $max_date;

        return $this;
    }

    /**
     * Gets aspect_ratio
     *
     * @return string
     */
    public function getAspectRatio()
    {
        return $this->container['aspect_ratio'];
    }

    /**
     * Sets aspect_ratio
     *
     * @param string $aspect_ratio aspect_ratio
     *
     * @return $this
     */
    public function setAspectRatio($aspect_ratio)
    {
        $this->container['aspect_ratio'] = $aspect_ratio;

        return $this;
    }

    /**
     * Gets min_width
     *
     * @return int
     */
    public function getMinWidth()
    {
        return $this->container['min_width'];
    }

    /**
     * Sets min_width
     *
     * @param int $min_width min_width
     *
     * @return $this
     */
    public function setMinWidth($min_width)
    {
        $this->container['min_width'] = $min_width;

        return $this;
    }

    /**
     * Gets min_height
     *
     * @return int
     */
    public function getMinHeight()
    {
        return $this->container['min_height'];
    }

    /**
     * Sets min_height
     *
     * @param int $min_height min_height
     *
     * @return $this
     */
    public function setMinHeight($min_height)
    {
        $this->container['min_height'] = $min_height;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


